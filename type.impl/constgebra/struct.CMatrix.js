(function() {var type_impls = {
"constgebra":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CMatrix%3C1,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#924-976\">source</a><a href=\"#impl-CMatrix%3C1,+N%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;1, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_vector\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#933-935\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.new_vector\" class=\"fn\">new_vector</a>(vals: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">N</a>]) -&gt; <a class=\"type\" href=\"constgebra/type.CVector.html\" title=\"type constgebra::CVector\">CVector</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>Special case of <code>CMatrix::new</code> for constructing a CVector\nAlways returns a row vector, follow with <code>transpose</code> to build\na column vector</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>ARRAY: [f64; <span class=\"number\">2</span>] = [<span class=\"number\">4.0</span>, <span class=\"number\">7.0</span>];\n\n<span class=\"kw\">const </span>ROWVECTOR: CVector::&lt;<span class=\"number\">2</span>&gt; = CVector::new_vector(ARRAY);</code></pre></div>\n</div></details><section id=\"method.new_vector_from_soft\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#937-939\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.new_vector_from_soft\" class=\"fn\">new_vector_from_soft</a>(vals: [<a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">N</a>]) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.dot\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#952-954\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.dot\" class=\"fn\">dot</a>(self, other: Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Dot product of two <code>CVector</code> of the same size.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>LEFT: CVector&lt;<span class=\"number\">3</span>&gt; = CVector::new_vector([<span class=\"number\">1.0</span>, <span class=\"number\">3.0</span>, -<span class=\"number\">5.0</span>]);\n<span class=\"kw\">const </span>RIGHT: CVector&lt;<span class=\"number\">3</span>&gt; = CVector::new_vector([<span class=\"number\">4.0</span>, -<span class=\"number\">2.0</span>, -<span class=\"number\">1.0</span>]);\n\n<span class=\"kw\">const </span>EXPECTED: f64 = <span class=\"number\">3.0</span>;\n<span class=\"kw\">const </span>RESULT: f64 = LEFT.dot(RIGHT);\n\n<span class=\"macro\">assert_eq!</span>(EXPECTED, RESULT)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish_vector\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#968-970\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.finish_vector\" class=\"fn\">finish_vector</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Special case of <code>CMatrix::finish</code> for use with a CVector,\nreturns <code>[f64 ; N]</code> instead of <code>[[f64 ; N]; 1]</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>ARRAY: [f64; <span class=\"number\">2</span>] = [<span class=\"number\">4.0</span>, <span class=\"number\">7.0</span>];\n\n<span class=\"kw\">const </span>CVECTOR: CVector::&lt;<span class=\"number\">2</span>&gt; = CVector::new_vector(ARRAY);\n\n<span class=\"kw\">const </span>RESULT: [f64; <span class=\"number\">2</span>] = CVECTOR.finish_vector();\n\n<span class=\"macro\">assert_eq!</span>(ARRAY, RESULT)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish_vector_soft\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#973-975\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.finish_vector_soft\" class=\"fn\">finish_vector_soft</a>(self) -&gt; [<a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p><code>CVector::finish_vector</code>, but returns soft floats</p>\n</div></details></div></details>",0,"constgebra::comptime::CVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#38-922\">source</a><a href=\"#impl-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#49-62\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.new\" class=\"fn\">new</a>(vals: [[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">C</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">R</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a <code>CMatrix</code> from a 2D array of <code>f64</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>ARRAY: [[f64; <span class=\"number\">2</span>]; <span class=\"number\">2</span>] = [\n    [<span class=\"number\">4.0</span>, <span class=\"number\">7.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">6.0</span>]\n];\n\n<span class=\"kw\">const </span>CMATRIX: CMatrix::&lt;<span class=\"number\">2</span>, <span class=\"number\">2</span>&gt; = CMatrix::new(ARRAY);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_from_soft\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#66-68\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.new_from_soft\" class=\"fn\">new_from_soft</a>(vals: [[<a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">C</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">R</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Equivalent to <code>CMatrix::new</code> using <code>const_soft_float::SoftF64</code>\ninstead of <code>f64.</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#71-75\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a <code>CMatrix</code> filled with zeroes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.identity\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#95-109\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.identity\" class=\"fn\">identity</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an identity <code>CMatrix</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code> <span class=\"kw\">const </span>LEFT: CMatrix&lt;<span class=\"number\">4</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n     [<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>],\n ]);\n\n <span class=\"kw\">const </span>RIGHT: CMatrix&lt;<span class=\"number\">3</span>, <span class=\"number\">3</span>&gt; = CMatrix::identity();\n\n <span class=\"kw\">const </span>EXPECTED: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">4</span>] = LEFT.finish();\n\n <span class=\"kw\">const </span>RESULT: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">4</span>] = LEFT.mul(RIGHT).finish();\n\n <span class=\"macro\">assert_eq!</span>(EXPECTED, RESULT);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#125-138\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.finish\" class=\"fn\">finish</a>(self) -&gt; [[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">C</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">R</a>]</h4></section></summary><div class=\"docblock\"><p>Converts a <code>CMatrix</code> back into a two-dimensional array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>ARRAY: [[f64; <span class=\"number\">2</span>]; <span class=\"number\">2</span>] = [\n    [<span class=\"number\">4.0</span>, <span class=\"number\">7.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">6.0</span>]\n];\n\n<span class=\"kw\">const </span>CMATRIX: CMatrix::&lt;<span class=\"number\">2</span>, <span class=\"number\">2</span>&gt; = CMatrix::new(ARRAY);\n\n<span class=\"kw\">const </span>RESULT: [[f64; <span class=\"number\">2</span>]; <span class=\"number\">2</span>] = CMATRIX.finish();\n\n<span class=\"macro\">assert_eq!</span>(ARRAY, RESULT)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish_soft\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#141-143\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.finish_soft\" class=\"fn\">finish_soft</a>(self) -&gt; [[<a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">C</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.array.html\">R</a>]</h4></section></summary><div class=\"docblock\"><p><code>CMatrix::finish</code>, but returns <code>const_soft_float::SoftF64</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#193-212\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.mul\" class=\"fn\">mul</a>&lt;const OC: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt;(self, rhs: <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;C, OC&gt;) -&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, OC&gt;</h4></section></summary><div class=\"docblock\"><p>Multiply two <code>CMatrix</code> and return the result. Columns\nof self and rows of multiplier must agree in number.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code> <span class=\"kw\">const </span>LEFT: CMatrix&lt;<span class=\"number\">4</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n     [<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>],\n ]);\n\n <span class=\"kw\">const </span>RIGHT: CMatrix&lt;<span class=\"number\">3</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n     [<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">1.0</span>],\n     [<span class=\"number\">4.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>]\n ]);\n\n <span class=\"kw\">const </span>EXPECTED: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">4</span>] = [\n     [<span class=\"number\">5.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">3.0</span>],\n     [<span class=\"number\">8.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">5.0</span>],\n     [<span class=\"number\">6.0</span>, <span class=\"number\">5.0</span>, <span class=\"number\">3.0</span>],\n     [<span class=\"number\">11.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">6.0</span>],\n ];\n\n <span class=\"kw\">const </span>RESULT: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">4</span>] = LEFT.mul(RIGHT).finish();\n\n <span class=\"macro\">assert_eq!</span>(EXPECTED, RESULT);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#239-252\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Add two <code>CMatrix</code> and return the result.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>LEFT: CMatrix&lt;<span class=\"number\">3</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n    [<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>]]\n);\n\n<span class=\"kw\">const </span>RIGHT: CMatrix&lt;<span class=\"number\">3</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n    [<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">4.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>]]\n);\n\n<span class=\"kw\">const </span>EXPECTED: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">3</span>] = [\n    [<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>],\n    [<span class=\"number\">4.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">2.0</span>],\n    [<span class=\"number\">4.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">3.0</span>]\n];\n\n<span class=\"kw\">const </span>RESULT: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">3</span>] = LEFT.add(RIGHT).finish();\n\n<span class=\"macro\">assert_eq!</span>(EXPECTED, RESULT);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#279-292\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Subtract two <code>CMatrix</code> and return the result.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>LEFT: CMatrix&lt;<span class=\"number\">3</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n    [<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">4.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>]]\n);\n\n<span class=\"kw\">const </span>RIGHT: CMatrix&lt;<span class=\"number\">3</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([\n    [<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>],\n    [<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>]]\n);\n\n<span class=\"kw\">const </span>EXPECTED: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">3</span>] = [\n    [<span class=\"number\">0.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>],\n    [<span class=\"number\">0.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>],\n    [<span class=\"number\">4.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>]\n];\n\n<span class=\"kw\">const </span>RESULT: [[f64; <span class=\"number\">3</span>]; <span class=\"number\">3</span>] = LEFT.sub(RIGHT).finish();\n\n<span class=\"macro\">assert_eq!</span>(EXPECTED, RESULT);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_each\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#301-316\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.apply_each\" class=\"fn\">apply_each</a>(self, op: <a class=\"enum\" href=\"constgebra/enum.Operation.html\" title=\"enum constgebra::Operation\">Operation</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Apply an operation to each member of the matrix separately. Especially\nuseful for scaling vectors</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>BASE: CMatrix&lt;<span class=\"number\">1</span>, <span class=\"number\">3</span>&gt; = CMatrix::new([[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>]]);\n<span class=\"kw\">const </span>MUL: CMatrix&lt;<span class=\"number\">1</span>, <span class=\"number\">3</span>&gt; = BASE.apply_each(Operation::Mul(<span class=\"number\">3.0</span>));\n<span class=\"macro\">assert_eq!</span>([[<span class=\"number\">3.0</span>, <span class=\"number\">6.0</span>, <span class=\"number\">9.0</span>]], MUL.finish());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#348-360\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.transpose\" class=\"fn\">transpose</a>(self) -&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;C, R&gt;</h4></section></summary><div class=\"docblock\"><p>Return the transpose of a <code>CMatrix</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>START: [[f64; <span class=\"number\">2</span>]; <span class=\"number\">2</span>] = [\n    [<span class=\"number\">4.0</span>, <span class=\"number\">7.0</span>],\n    [<span class=\"number\">2.0</span>, <span class=\"number\">6.0</span>]\n];\n\n<span class=\"kw\">const </span>EXPECTED: [[f64; <span class=\"number\">2</span>]; <span class=\"number\">2</span>] = [\n    [<span class=\"number\">4.0</span>, <span class=\"number\">2.0</span>],\n    [<span class=\"number\">7.0</span>, <span class=\"number\">6.0</span>]\n];\n\n<span class=\"kw\">const </span>RESULT: [[f64; <span class=\"number\">2</span>]; <span class=\"number\">2</span>] =\n    CMatrix::new(START).transpose().finish();\n\n<span class=\"macro\">assert_eq!</span>(EXPECTED, RESULT)</code></pre></div>\n</div></details><section id=\"method.givens_l\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#363-391\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.givens_l\" class=\"fn\">givens_l</a>(self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, a: <a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>, b: <a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>) -&gt; Self</h4></section><section id=\"method.givens_r\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#394-422\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.givens_r\" class=\"fn\">givens_r</a>(self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, a: <a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>, b: <a class=\"struct\" href=\"const_soft_float/soft_f64/struct.SoftF64.html\" title=\"struct const_soft_float::soft_f64::SoftF64\">Sf64</a>) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.svd\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#460-580\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.svd\" class=\"fn\">svd</a>(self, epsilon: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;C, R&gt;</h4></section></summary><div class=\"docblock\"><p>Singular Value Decomposition</p>\n</div></details><section id=\"method.pinv\" class=\"method\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#915-921\">source</a><h4 class=\"code-header\">pub const fn <a href=\"constgebra/struct.CMatrix.html#tymethod.pinv\" class=\"fn\">pinv</a>(self, epsilon: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;C, R&gt;</h4></section></div></details>",0,"constgebra::comptime::CVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#impl-Clone-for-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","constgebra::comptime::CVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#32-36\">source</a><a href=\"#impl-Default-for-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#33-35\">source</a><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the โdefault valueโ for a type. <a href=\"https://doc.rust-lang.org/1.79.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","constgebra::comptime::CVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#impl-PartialEq-for-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","constgebra::comptime::CVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#impl-PartialOrd-for-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.79.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.79.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/cmp.rs.html#1179\">source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/cmp.rs.html#1197\">source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/cmp.rs.html#1214\">source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/cmp.rs.html#1232\">source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.79.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","constgebra::comptime::CVector"],["<section id=\"impl-Copy-for-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#impl-Copy-for-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section>","Copy","constgebra::comptime::CVector"],["<section id=\"impl-StructuralPartialEq-for-CMatrix%3CR,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/constgebra/comptime.rs.html#29\">source</a><a href=\"#impl-StructuralPartialEq-for-CMatrix%3CR,+C%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;const R: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>, const C: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"constgebra/struct.CMatrix.html\" title=\"struct constgebra::CMatrix\">CMatrix</a>&lt;R, C&gt;</h3></section>","StructuralPartialEq","constgebra::comptime::CVector"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()