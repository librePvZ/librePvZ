searchState.loadedDescShard("gltf_json", 0, "A typed view into a buffer view.\nA keyframe animation.\nRepresents a JSON array.\nMetadata about the glTF asset.\nRepresents a JSON boolean.\nA buffer points to binary data representing geometry, …\nA camera’s projection.\nThis type represents all possible errors that can occur …\nData type of the <code>extras</code> attribute on all glTF objects.\nImage data used to create a texture.\nRepresents an offset into a vector of type <code>T</code> owned by the …\nThe material appearance of a primitive.\nA set of primitives to be rendered.\nA node in the node hierarchy.  When the node contains <code>skin</code>…\nNo value.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nAn immutable JSON source path.\nThe root object of a glTF 2.0 asset.\nThe root <code>Node</code>s of a scene.\nJoints and matrices defining a skin.\nSome value of type <code>T</code>.\nRepresents a JSON string.\nA texture and its sampler.\nRepresents any valid JSON value.\nContains <code>Accessor</code> and other related data structures.\nAn array of accessors.\nThe alpha cutoff value of the material.\nThe alpha rendering mode of the material.\nContains <code>Animation</code> and other related data structures.\nAn array of keyframe animations.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nContains <code>Asset</code> metadata.\nMetadata about the glTF asset.\nContains <code>Buffer</code>, <code>View</code>, and other related data structures.\nThe parent buffer view this accessor reads from.\nThe index of the buffer view that contains the image. Use …\nAn array of buffer views.\nAn array of buffers.\nThe length of the buffer in bytes.\nThe offset relative to the start of the parent <code>BufferView</code> …\nContains <code>Camera</code> and other related data structures.\nThe index of the camera referenced by this node.\nAn array of cameras.\nAn array of channels, each of which targets an animation’…\nThe indices of this node’s children.\nCategorizes the cause of this error.\nOne-based column number at which the error was detected.\nThe data type of components in the attribute.\nA copyright message suitable for display to credit the …\nThe number of components within the buffer view - not to …\nRe-exports of <code>serde_json</code> deserialization functions.\nSpecifies whether the material is double-sided.\nThe emissive color of the material.\nThe emissive map controls the color and intensity of the …\nContains extension specific data structures and the names …\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nNames of glTF extensions required to properly load this …\nNames of glTF extensions used somewhere in this asset.\nContains <code>Extras</code>.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert a slice to <code>Value::Array</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert string slice to <code>Value::String</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nTool that generated this glTF model.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nContains <code>Image</code> and other related data structures.\nAn array of images.\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the accessor containing the 4x4 inverse-bind …\nThe kind reported by the underlying standard library I/O …\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if this error was caused by input data that …\nReturns true if this error was caused by prematurely …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if this error was caused by a failure to read …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if this error was caused by input that was not\nReturns true if the <code>Value</code> is an integer between zero and …\nIndices of skeleton nodes used as joints in this skin.\nOne-based line number at which the error was detected.\nContains <code>Material</code> and other related data structures.\nAn array of materials.\n4x4 column-major transformation matrix.\nMaximum value of each component in this attribute.\nContains <code>Mesh</code> and other related data structures.\nThe index of the mesh in this node.\nAn array of meshes.\nThe image’s MIME type.\nMinimum value of each component in this attribute.\nThe minimum glTF version that this asset targets.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nAn array of nodes.\nThe indices of each root node.\nA tangent space normal map. The texture contains RGB …\nSpecifies whether integer data values should be normalized.\nThe occlusion map texture. The occlusion values are …\nAn orthographic camera containing properties to create an …\nContains <code>Path</code>.\nA set of parameter values that are used to define the …\nA perspective camera containing properties to create a …\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nDefines the geometry to be renderered with a material.\nContains <code>Root</code>.\nThe node’s unit quaternion rotation in the order (x, y, …\nThe index of the sampler used by this texture.\nAn array of samplers that combine input and output …\nAn array of samplers.\nThe node’s non-uniform scale.\nContains <code>Scene</code>, <code>Node</code>, and other related data structures.\nThe default scene.\nAn array of scenes.\nRe-exports of <code>serde_json</code> serialization functions.\nThe index of the node used as a skeleton root.\nContains <code>Skin</code> and other related data structures.\nThe index of the skin referenced by this node.\nAn array of skins.\nThe index of the image used by this texture.\nSparse storage of attributes that deviate from their …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nContains <code>Texture</code>, <code>Sampler</code>, and other related data …\nAn array of textures.\nThe node’s translation.\nSpecifies if the attribute is a scalar, vector, or matrix.\nSpecifies if the camera uses a perspective or orthographic …\nThe uri of the buffer.  Relative paths are relative to the …\nThe uri of the image.  Relative paths are relative to the …\nContains functions that validate glTF JSON data against …\nThe glTF version of this asset.\nDefines the weights to be applied to the morph targets.\nThe weights of the instantiated Morph Target. Number of …\nA typed view into a buffer view.\nCorresponds to <code>GL_BYTE</code>.\nThe component data type.\nCorresponds to <code>GL_FLOAT</code>.\nCorresponds to <code>GL_FLOAT</code>.\nThe data type of a generic vertex attribute.\nCorresponds to <code>GL_SHORT</code>.\nCorresponds to <code>GL_BYTE</code>.\nThe data type of an index.\n2x2 matrix.\n3x3 matrix.\n4x4 matrix.\nCorresponds to <code>GL_SHORT</code>.\nScalar quantity.\nSpecifies whether an attribute, vector, or matrix.\nCorresponds to <code>GL_UNSIGNED_SHORT</code>.\nCorresponds to <code>GL_UNSIGNED_INT</code>.\nCorresponds to <code>GL_UNSIGNED_BYTE</code>.\nCorresponds to <code>GL_UNSIGNED_BYTE</code>.\nCorresponds to <code>GL_UNSIGNED_INT</code>.\nCorresponds to <code>GL_UNSIGNED_SHORT</code>.\nAll valid accessor types.\nAll valid generic vertex attribute component types.\nAll valid index component types.\n2D vector.\n3D vector.\n4D vector.\nReturns the corresponding <code>GLenum</code>.\nThe parent buffer view this accessor reads from.\nThe offset relative to the start of the parent <code>BufferView</code> …\nThe data type of components in the attribute.\nThe number of components within the buffer view - not to …\nExtension specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum value of each component in this attribute.\nMinimum value of each component in this attribute.\nReturns the equivalent number of scalar quantities this …\nOptional user-defined name for this object.\nSpecifies whether integer data values should be normalized.\nReturns the number of bytes this value represents.\nContains data structures for sparse storage.\nSparse storage of attributes that deviate from their …\nSpecifies if the attribute is a scalar, vector, or matrix.\nIndices of those attributes that deviate from their …\nSparse storage of attributes that deviate from their …\nArray of size <code>count * number_of_components</code> storing the …\nThe parent buffer view containing the sparse indices.\nThe parent buffer view containing the sparse indices.\nThe offset relative to the start of the parent <code>BufferView</code> …\nThe offset relative to the start of the parent buffer view …\nThe data type of each index.\nThe number of attributes encoded in this sparse accessor.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex array of size <code>count</code> that points to those accessor …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArray of size <code>count * number_of_components</code> storing the …\nA keyframe animation.\nTargets an animation’s sampler at a node’s property.\nCubic spline interpolation.\nSpecifies an interpolation algorithm.\nLinear interpolation.\nWeights of morph targets.\nSpecifies a property to animate.\nXYZW rotation quaternion.\nDefines a keyframe graph but not its target.\nXYZ scale vector.\nStep interpolation.\nThe index of the node and TRS property that an animation …\nXYZ translation vector.\nAll valid animation interpolation algorithms.\nAll valid animation property names.\nAn array of channels, each of which targets an animation’…\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of an accessor containing keyframe input values, …\nThe interpolation algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional user-defined name for this object.\nThe index of the node to target.\nThe index of an accessor containing keyframe output values.\nThe name of the node’s property to modify or the ‘…\nThe index of a sampler in this animation used to compute …\nAn array of samplers that combine input and output …\nThe index of the node and TRS property to target.\nMetadata about the glTF asset.\nA copyright message suitable for display to credit the …\nExtension specific data.\nOptional application specific data.\nTool that generated this glTF model.\nThe minimum glTF version that this asset targets.\nThe glTF version of this asset.\nCorresponds to <code>GL_ARRAY_BUFFER</code>.\nCorresponds to <code>GL_ARRAY_BUFFER</code>.\nA buffer points to binary data representing geometry, …\nCorresponds to <code>GL_ELEMENT_ARRAY_BUFFER</code>.\nCorresponds to <code>GL_ELEMENT_ARRAY_BUFFER</code>.\nThe maximum byte stride.\nThe minimum byte stride.\nDistance between individual items in a buffer view, …\nSpecifies the target a GPU buffer should be bound to.\nAll valid GPU buffer targets.\nA view into a buffer generally representing a subset of …\nThe parent <code>Buffer</code>.\nThe length of the buffer in bytes.\nThe length of the <code>BufferView</code> in bytes.\nOffset into the parent buffer in bytes.\nThe stride in bytes between vertex attributes or other …\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nOptional target the buffer should be bound to.\nThe uri of the buffer.  Relative paths are relative to the …\nA camera’s projection.\nValues for an orthographic camera.\nAn orthographic projection.\nValues for a perspective camera.\nA perspective projection.\nSpecifies the camera type.\nAll valid camera types.\nAspect ratio of the field of view.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional user-defined name for this object.\nAn orthographic camera containing properties to create an …\nA perspective camera containing properties to create a …\nSpecifies if the camera uses a perspective or orthographic …\nThe horizontal magnification of the view.\nThe vertical field of view in radians.\nThe vertical magnification of the view.\nThe distance to the far clipping plane.\nThe distance to the far clipping plane.\nThe distance to the near clipping plane.\nThe distance to the near clipping plane.\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nNames of glTF 2.0 extensions enabled by the user.\nNames of glTF 2.0 extensions supported by the library.\nContains <code>Accessor</code> and other related data structures.\nContains <code>Animation</code> and other related data structures.\nContains <code>Asset</code> metadata.\nContains <code>Buffer</code>, <code>View</code>, and other related data structures.\nContains <code>Camera</code> and other related data structures.\nContains <code>Image</code> and other related data structures.\nContains <code>Material</code> and other related data structures.\nContains <code>Mesh</code> and other related data structures.\nContains <code>Root</code>.\nContains <code>Scene</code>, <code>Node</code>, and other related data structures.\nContains <code>Skin</code> and other related data structures.\nContains <code>Texture</code>, <code>Sampler</code>, and other related data …\nA typed view into a buffer view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains data structures for sparse storage.\nIndices of those attributes that deviate from their …\nSparse storage of attributes that deviate from their …\nArray of size <code>count * number_of_components</code> storing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA keyframe animation.\nTargets an animation’s sampler at a node’s property.\nDefines a keyframe graph but not its target.\nThe index of the node and TRS property that an animation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetadata about the glTF asset.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA buffer points to binary data representing geometry, …\nA view into a buffer generally representing a subset of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA camera’s projection.\nValues for an orthographic camera.\nValues for a perspective camera.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImage data used to create a texture.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA colour in the inclusive range [[0.0; 3], [1.0; 3]] with …\nA number in the inclusive range [0.0, +inf] with a default …\nA positive number with 1.0 as the default value.\nA positive number with default value of 1.5\nThe material appearance of a primitive.\nDefines the normal texture of a material.\nDefines the occlusion texture of a material.\nA set of parameter values that are used to define the …\nA number in the inclusive range [0.0, +inf] with a default …\nA number in the inclusive range [0.0, 1.0] with a default …\nEmpty struct that should be present for primitives which …\nThe color that white light turns into due to absorption …\nDensity of the medium given as the average distance that …\nThe factor by which to scale the emissive factor or …\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of refraction.\nThe thickness of the volume beneath the surface. The value …\nA texture that defines the thickness, stored in the G …\nThe base percentage of light that is transmitted through …\nThe transmission texture.\nA set of primitives to be rendered.\nGeometry to be rendered with the given material.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe root object of a glTF 2.0 asset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLights at this node.\nA node in the node hierarchy.  When the node contains <code>skin</code>…\nThe root <code>Node</code>s of a scene.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDirectional lights act as though they are infinitely far …\nPoint lights emit light in all directions from their …\nSpot light parameters.\nSpot lights emit light in a cone in the direction of the …\nSpecifies the light type.\nAll valid light types.\nColor of the light source.\nExtension specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAngle in radians from centre of spotlight where falloff …\nIntensity of the light source. <code>point</code> and <code>spot</code> lights use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional user-defined name for this object.\nAngle in radians from centre of spotlight where falloff …\nA distance cutoff at which the light’s intensity may be …\nSpot light parameters.\nSpecifies the light type.\nJoints and matrices defining a skin.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReference to a <code>Texture</code>.\nTexture sampler properties for filtering and wrapping …\nA texture and its sampler.\nMany techniques can be used to optimize resource usage for …\nThe offset of the UV coordinate origin as a factor of the …\nRotate the UVs by this many radians counter-clockwise …\nThe scale factor applied to the components of the UV …\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRotate the UVs by this many radians counter-clockwise …\nThe scale factor applied to the components of the UV …\nOverrides the textureInfo texCoord value if supplied, and …\nData type of the <code>extras</code> attribute on all glTF objects.\nNo value.\nReference to a range of bytes encompassing a single valid …\nSome value of type <code>T</code>.\nType representing no user-defined data.\nReturns the argument unchanged.\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nAccess the JSON text underlying a raw value.\nCalls <code>U::from(self)</code>.\nImage data used to create a texture.\nAn image MIME type.\nAll valid MIME types.\nThe index of the buffer view that contains the image. Use …\nExtension specific data.\nOptional application specific data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe image’s MIME type.\nOptional user-defined name for this object.\nThe uri of the image.  Relative paths are relative to the …\nThe alpha cutoff value of a material.\nThe alpha rendering mode of a material.\nThe alpha value is used, to determine the transparency of …\nThe emissive color of a material.\nThe rendered output is either fully opaque or fully …\nThe material appearance of a primitive.\nDefines the normal texture of a material.\nDefines the occlusion texture of a material.\nThe alpha value is ignored and the rendered output is …\nThe base color factor of a material.\nA set of parameter values that are used to define the …\nA number in the inclusive range [0.0, 1.0] with a default …\nAll valid alpha modes.\nThe alpha cutoff value of the material.\nThe alpha rendering mode of the material.\nThe material’s base color factor.\nThe base color texture.\nSpecifies whether the material is double-sided.\nThe emissive color of the material.\nThe emissive map controls the color and intensity of the …\nExtension specific data.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the texture.\nThe index of the texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe metalness of the material.\nThe metallic-roughness texture.\nOptional user-defined name for this object.\nA tangent space normal map. The texture contains RGB …\nThe occlusion map texture. The occlusion values are …\nA set of parameter values that are used to define the …\nThe roughness of the material.\nThe scalar multiplier applied to each normal vector of the …\nThe scalar multiplier controlling the amount of occlusion …\nThe set index of the texture’s <code>TEXCOORD</code> attribute.\nThe set index of the texture’s <code>TEXCOORD</code> attribute.\nRGB or RGBA vertex color.\nExtra attribute name.\nJoint indices.\nCorresponds to <code>GL_LINES</code>.\nCorresponds to <code>GL_LINE_LOOP</code>.\nCorresponds to <code>GL_LINE_STRIP</code>.\nCorresponds to <code>GL_LINE_LOOP</code>.\nCorresponds to <code>GL_LINE_STRIP</code>.\nCorresponds to <code>GL_LINES</code>.\nA set of primitives to be rendered.\nThe type of primitives to render.\nA dictionary mapping attributes to their deviations in the …\nXYZ vertex normals.\nCorresponds to <code>GL_POINTS</code>.\nCorresponds to <code>GL_POINTS</code>.\nXYZ vertex positions.\nGeometry to be rendered with the given material.\nVertex attribute semantic name.\nCorresponds to <code>GL_TRIANGLES</code>.\nCorresponds to <code>GL_TRIANGLE_FAN</code>.\nCorresponds to <code>GL_TRIANGLE_STRIP</code>.\nXYZW vertex tangents where the <code>w</code> component is a sign value …\nUV texture co-ordinates.\nCorresponds to <code>GL_TRIANGLE_FAN</code>.\nCorresponds to <code>GL_TRIANGLE_STRIP</code>.\nCorresponds to <code>GL_TRIANGLES</code>.\nAll valid primitive rendering modes.\nAll valid semantic names for Morph targets.\nJoint weights.\nReturns the equivalent <code>GLenum</code>.\nMaps attribute semantic names to the <code>Accessor</code>s containing …\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the accessor that contains the indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the material to apply to this primitive when …\nThe type of primitives to render.\nOptional user-defined name for this object.\nXYZ vertex normal displacements of type <code>[f32; 3]</code>.\nXYZ vertex position displacements of type <code>[f32; 3]</code>.\nDefines the geometry to be renderered with a material.\nXYZ vertex tangent displacements of type <code>[f32; 3]</code>.\nAn array of Morph Targets, each  Morph Target is a …\nDefines the weights to be applied to the morph targets.\nAn immutable JSON source path.\nReturns a view into the internal representation.\nReturns a new path ending with the given field.\nReturns a new path ending with the given array index.\nReturns a new path ending with the given object key.\nCreates an empty JSON source path.\nProvides a string value for a JSON path.\nHelper trait for retrieving top-level objects by a …\nRepresents an offset into a vector of type <code>T</code> owned by the …\nThe root object of a glTF 2.0 asset.\nAn array of accessors.\nAn array of keyframe animations.\nMetadata about the glTF asset.\nAn array of buffer views.\nAn array of buffers.\nAn array of cameras.\nExtension specific data.\nNames of glTF extensions required to properly load this …\nNames of glTF extensions used somewhere in this asset.\nOptional application specific data.\nDeserialize from a stream of JSON.\nDeserialize from a JSON byte slice.\nDeserialize from a JSON string slice.\nRetrieves a single value at the given index.\nReturns a single item from the root object.\nAn array of images.\nAn array of materials.\nAn array of meshes.\nCreates a new <code>Index</code> representing an offset into an array …\nAn array of nodes.\nGiven a vector of glTF objects, call <code>Vec::push()</code> to insert …\nInsert the given value into this (as via <code>Vec::push()</code>), …\nAn array of samplers.\nThe default scene.\nAn array of scenes.\nAn array of skins.\nAn array of textures.\nSerialize as a <code>String</code> of JSON.\nSerialize as a pretty-printed <code>String</code> of JSON.\nSerialize as a generic JSON value.\nSerialize as a JSON byte vector.\nSerialize as a pretty-printed JSON byte vector.\nSerialize as a JSON byte writertor.\nSerialize as a pretty-printed JSON byte writertor.\nReturns the internal offset value.\nA node in the node hierarchy.  When the node contains <code>skin</code>…\nThe root <code>Node</code>s of a scene.\nUnit quaternion rotation in the order (x, y, z, w), where …\nThe index of the camera referenced by this node.\nThe indices of this node’s children.\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n4x4 column-major transformation matrix.\nThe index of the mesh in this node.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nThe indices of each root node.\nThe node’s unit quaternion rotation in the order (x, y, …\nThe node’s non-uniform scale.\nThe index of the skin referenced by this node.\nThe node’s translation.\nThe weights of the instantiated Morph Target. Number of …\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nJoints and matrices defining a skin.\nExtension specific data.\nOptional application specific data.\nThe index of the accessor containing the 4x4 inverse-bind …\nIndices of skeleton nodes used as joints in this skin.\nOptional user-defined name for this object.\nThe index of the node used as a skeleton root.\nCorresponds to <code>GL_CLAMP_TO_EDGE</code>.\nCorresponds to <code>GL_CLAMP_TO_EDGE</code>.\nReference to a <code>Texture</code>.\nCorresponds to <code>GL_LINEAR</code>.\nCorresponds to <code>GL_LINEAR_MIPMAP_LINEAR</code>.\nCorresponds to <code>GL_LINEAR_MIPMAP_NEAREST</code>.\nCorresponds to <code>GL_LINEAR</code>.\nCorresponds to <code>GL_LINEAR</code>.\nCorresponds to <code>GL_LINEAR_MIPMAP_LINEAR</code>.\nCorresponds to <code>GL_LINEAR_MIPMAP_NEAREST</code>.\nCorresponds to <code>GL_MIRRORED_REPEAT</code>.\nMagnification filter.\nMinification filter.\nCorresponds to <code>GL_MIRRORED_REPEAT</code>.\nCorresponds to <code>GL_NEAREST</code>.\nCorresponds to <code>GL_NEAREST_MIPMAP_LINEAR</code>.\nCorresponds to <code>GL_NEAREST_MIPMAP_NEAREST</code>.\nCorresponds to <code>GL_NEAREST</code>.\nCorresponds to <code>GL_NEAREST</code>.\nCorresponds to <code>GL_NEAREST_MIPMAP_LINEAR</code>.\nCorresponds to <code>GL_NEAREST_MIPMAP_NEAREST</code>.\nCorresponds to <code>GL_REPEAT</code>.\nCorresponds to <code>GL_REPEAT</code>.\nTexture sampler properties for filtering and wrapping …\nA texture and its sampler.\nAll valid magnification filters.\nAll valid minification filters.\nAll valid wrapping modes.\nTexture co-ordinate wrapping mode.\nOpenGL enum\nReturns the corresponding OpenGL enum value.\nReturns the corresponding OpenGL enum value.\nExtension specific data.\nExtension specific data.\nExtension specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMagnification filter.\nMinification filter.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nThe index of the sampler used by this texture.\nThe index of the image used by this texture.\nThe set index of the texture’s <code>TEXCOORD</code> attribute.\n<code>s</code> wrapping mode.\n<code>t</code> wrapping mode.\nSpecifies a type that has been pre-validated during …\nSpecifies what kind of error occured during validation.\nAn index was found to be out of bounds.\nAn invalid value was identified.\nThe item is invalid.\nSome required data has been omitted.\nA memory size or offset exceeds the system limits.\nValidates the suitability of 64-bit byte offsets/sizes on …\nOne of more required extensions is not supported by this …\nThe item is valid.\nTrait for validating glTF JSON data so that the library …\nConverts from <code>Checked&lt;T&gt;</code> to <code>Checked&lt;&amp;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes ownership of the contained item if it is <code>Valid</code>.\nValidates the invariants required for the library to …")