searchState.loadedDescShard("bevy_tasks", 0, "Bevy Tasks\nA newtype for a task pool for CPU-intensive work that may …\nA newtype for a task pool for CPU-intensive work that must …\nA newtype for a task pool for IO-intensive work (i.e. …\n<code>ParallelIterator</code> closely emulates the <code>std::iter::Iterator</code> …\nProvides functions for mapping read-only slices across a …\nProvides functions for mapping mutable slices across a …\nA <code>TaskPool</code> scope for running one or more non-<code>&#39;static</code> …\nWraps <code>async_executor::Task</code>, a spawned future.\nA thread pool for executing tasks.\nUsed to create a <code>TaskPool</code>\nAn executor that can only be ticked on the thread it was …\nUsed to tick the <code>ThreadExecutor</code>. The executor does not …\nTests if every element of the parallel iterator matches a …\nTests if every element of the parallel iterator matches a …\nTests if any element of the parallel iterator matches a …\nTests if any element of the parallel iterator matches a …\nGets the logical CPU core count available to the current …\nBlocks the current thread on a future.\nCreates a new <code>TaskPool</code> based on the current options.\nBorrows a parallel iterator, rather than consuming it.\nBorrows a parallel iterator, rather than consuming it.\nCancels the task and waits for it to stop running.\nTakes two parallel iterators and returns a parallel …\nTakes two parallel iterators and returns a parallel …\nCreates a parallel iterator which clones all of its items.\nCreates a parallel iterator which clones all of its items.\nTransforms a parallel iterator into a collection.\nTransforms a parallel iterator into a collection.\nCreates a parallel iterator which copies all of its items.\nCreates a parallel iterator which copies all of its items.\nConsumes the parallel iterator and returns the number of …\nConsumes the parallel iterator and returns the number of …\nRepeats a parallel iterator endlessly.\nRepeats a parallel iterator endlessly.\nDetaches the task to let it keep running in the …\nCreates a parallel iterator which uses a closure to …\nCreates a parallel iterator which uses a closure to …\nCreates a parallel iterator that both filters and maps.\nCreates a parallel iterator that both filters and maps.\nCreates a parallel iterator that works like map, but …\nCreates a parallel iterator that works like map, but …\nCreates a parallel iterator that flattens nested structure.\nCreates a parallel iterator that flattens nested structure.\nRepeatedly applies a function to items of each batch of a …\nRepeatedly applies a function to items of each batch of a …\nCalls a closure on each item of a parallel iterator.\nCalls a closure on each item of a parallel iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a parallel iterator which ends after the first …\nCreates a parallel iterator which ends after the first …\nGets the global <code>ComputeTaskPool</code> instance.\nGets the global <code>AsyncComputeTaskPool</code> instance.\nGets the global <code>IoTaskPool</code> instance.\nGets the global <code>ComputeTaskPool</code> instance, or initializes …\nGets the global <code>AsyncComputeTaskPool</code> instance, or …\nGets the global <code>IoTaskPool</code> instance, or initializes it …\nEach thread should only create one <code>ThreadExecutor</code>, …\nDoes something with each item of a parallel iterator, …\nDoes something with each item of a parallel iterator, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current task is finished.\nReturns true if <code>self</code> and <code>other</code>’s executor is same\nConsumes the parallel iterator and returns the last item.\nConsumes the parallel iterator and returns the last item.\nTakes a closure and creates a parallel iterator which …\nTakes a closure and creates a parallel iterator which …\nReturns the maximum item of a parallel iterator.\nReturns the maximum item of a parallel iterator.\nReturns the item that gives the maximum value with respect …\nReturns the item that gives the maximum value with respect …\nReturns the item that gives the maximum value from the …\nReturns the item that gives the maximum value from the …\nReturns the minimum item of a parallel iterator.\nReturns the minimum item of a parallel iterator.\nReturns the item that gives the minimum value with respect …\nReturns the item that gives the minimum value with respect …\nReturns the item that gives the minimum value from the …\nReturns the item that gives the minimum value from the …\nCreates a new task from a given <code>async_executor::Task</code>\nCreates a new <code>TaskPoolBuilder</code> instance\nCreate a <code>TaskPool</code> with the default configuration.\ncreate a new <code>ThreadExecutor</code>\nReturns the next batch of items for processing.\nConsumes the parallel iterator and returns the nth item.\nConsumes the parallel iterator and returns the nth item.\nOverride the number of threads created for the pool. If …\nSets a callback that is invoked once for every created …\nSets a callback that is invoked once for every created …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nConsumes a parallel iterator, creating two collections …\nConsumes a parallel iterator, creating two collections …\nPolls a future just once and returns an <code>Option</code> with the …\nSearches for an element in a parallel iterator, returning …\nSearches for an element in a parallel iterator, returning …\nMultiplies all the items of a parallel iterator.\nMultiplies all the items of a parallel iterator.\nAllows spawning non-<code>&#39;static</code> futures on the thread pool. …\nThis allows passing an external executor to spawn tasks …\nReturns the bounds on the remaining number of items in the …\nReturns the bounds on the remaining number of items in the …\nSpawns a static future onto the thread pool. The returned …\nSpawns a scoped future onto the thread pool. The scope <em>must</em>…\nSpawn a task on the thread executor\nSpawns a static future on the thread-local async executor …\nSpawns a scoped future onto the thread of the external …\nSpawns a scoped future onto the thread the scope is run …\nOverride the stack size of the threads created for the pool\nSums the items of a parallel iterator.\nSums the items of a parallel iterator.\nOverride the name of the threads created for the pool. If …\nReturn the number of threads owned by the task pool\nTick the thread executor.\nA function used by <code>bevy_core</code> to tick the global tasks …\nGets the <code>ThreadExecutorTicker</code> for this executor. Use this …\nAttempts to get the global <code>ComputeTaskPool</code> instance, or …\nAttempts to get the global <code>AsyncComputeTaskPool</code> instance, …\nAttempts to get the global <code>IoTaskPool</code> instance, or returns …\nSynchronously try to tick a task on the executor. Returns …\nRuns a function with the local executor. Typically used to …")