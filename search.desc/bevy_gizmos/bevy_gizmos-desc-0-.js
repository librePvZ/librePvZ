searchState.loadedDescShard("bevy_gizmos", 0, "This crate adds an immediate mode drawing api to Bevy for …\nA extension trait adding <code>App::init_gizmo_group</code> and …\nA <code>Plugin</code> that provides an immediate mode drawing api for …\nSystem set label for the systems handling the rendering of …\nAdds gizmos to the <code>Transparent2d</code> render phase\nAdds gizmos to the <code>Transparent3d</code> render phase\nSystem set for updating the rendering meshes for drawing …\nA module adding debug visualization of <code>Aabb</code>s.\nAdditional <code>Gizmos</code> Functions – Arcs\nAdditional <code>Gizmos</code> Functions – Arrows\nAdditional <code>Gizmos</code> Functions – Circles\nClear out the contextual gizmos.\nCollect the requested gizmos into a specific clear context.\nA module for the <code>GizmoConfig&lt;T&gt;</code> <code>Resource</code>.\nEnd this gizmo clearing context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA module for the <code>Gizmos</code> <code>SystemParam</code>.\nAdditional <code>Gizmos</code> Functions – Grids\nRegisters <code>GizmoConfigGroup</code> in the app enabling the use of …\nInsert a <code>GizmoConfig</code> into a specific <code>GizmoConfigGroup</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA module adding debug visualization of <code>PointLight</code>s, …\nThe <code>bevy_gizmos</code> prelude.\nA module for rendering each of the 2D and 3D …\nPropagate the contextual gizmo into the <code>Update</code> storage for …\nAdditional <code>Gizmos</code> Functions – Rounded cuboids and …\nStart a new gizmo clearing context.\nThe <code>GizmoConfigGroup</code> used for debug visualizations of <code>Aabb</code> …\nA <code>Plugin</code> that provides visualization of <code>Aabb</code>s for …\nAdd this <code>Component</code> to an entity to draw its <code>Aabb</code> component.\nThe color of the box.\nThe default color for bounding box gizmos.\nDraws all bounding boxes in the scene when set to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA builder returned by <code>Gizmos::arc_2d</code>.\nA builder returned by <code>Gizmos::arc_2d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of lines used to approximate the geometry …\nSet the number of lines for this arc.\nA builder returned by <code>Gizmos::arrow</code> and <code>Gizmos::arrow_2d</code>\nDraws the arrow, by drawing lines with the stored <code>Gizmos</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds another tip to the arrow, appended in the start point.\nChange the length of the tips to be <code>length</code>. The default …\nA builder returned by <code>Gizmos::ellipse_2d</code>.\nA builder returned by <code>Gizmos::ellipse</code>.\nBuilder for configuring the drawing options of [<code>Sphere</code>].\nSet the number of line-segments for this ellipse.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of lines used to approximate the geometry …\nSet the number of line-segments used to approximate the …\nSet the number of line-segments used to approximate the …\nDraws a bevel, a straight line in this case, to connect …\nThe default gizmo config group.\nA dotted line\nA struct that stores configuration for gizmos.\nA trait used to create gizmo configs groups.\nImplements the <code>GizmoConfigGroup</code> trait for a gizmo config …\nA <code>Resource</code> storing <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> structs\nAn enum configuring how line joints will be drawn.\nAn enum used to configure the style of gizmo lines, …\nExtends both lines at the joining point until they meet in …\nDoes not draw any line joints.\nDraws a round corner with the specified resolution between …\nA solid line without any decorators\nReturns <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> associated with …\nReturns mutable <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> …\nHow closer to the camera than real geometry the line …\nSet to <code>false</code> to stop drawing gizmos.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> associated with …\nReturns mutable <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> …\nInserts <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> replacing old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all <code>GizmoConfig</code>s.\nReturns an iterator over all <code>GizmoConfig</code>s, by mutable …\nDescribe how lines should join\nApply perspective to gizmo lines.\nDetermine the style of gizmo lines.\nLine width specified in pixels.\nDescribes which rendering layers gizmos will be rendered …\nStorage of gizmo primitives.\nA <code>SystemParam</code> for drawing gizmos.\nSwap buffer for a specific clearing context.\nCombine the other gizmo storage with this one.\nDraw an arc, which is a part of the circumference of a …\nDraw an arc, which is a part of the circumference of a …\nDraw an arrow in 3D, from <code>start</code> to <code>end</code>. Has four tips for …\nDraw an arrow in 2D (on the xy plane), from <code>start</code> to <code>end</code>.\nDraw a set of axes local to the given transform (<code>transform</code>…\nDraw a set of axes local to the given transform (<code>transform</code>…\nDraw a circle in 3D at <code>position</code> with the flat side facing …\nDraw a circle in 2D.\nClear this gizmo storage of any requested gizmos.\nThe currently used <code>GizmoConfig</code>\nThe currently used <code>GizmoConfigGroup</code>\nDraw a wireframe cube in 3D.\nDraw an ellipse in 3D at <code>position</code> with the flat side …\nDraw an ellipse in 2D.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDraw a 2D grid in 3D.\nDraw a grid in 2D.\nDraw a 3D grid of voxel-like cells.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw a line in 3D from <code>start</code> to <code>end</code>.\nDraw a line in 2D from <code>start</code> to <code>end</code>.\nDraw a line in 3D with a color gradient from <code>start</code> to <code>end</code>.\nDraw a line in 2D with a color gradient from <code>start</code> to <code>end</code>.\nDraw a line in 3D made of straight segments between the …\nDraw a line in 2D made of straight segments between the …\nDraw a line in 3D made of straight segments between the …\nDraw a line in 2D made of straight segments between the …\nDraws the longest arc between two points (<code>from</code> and <code>to</code>) …\nDraw a line in 3D from <code>start</code> to <code>start + vector</code>.\nDraw a line in 2D from <code>start</code> to <code>start + vector</code>.\nDraw a line in 3D with a color gradient from <code>start</code> to …\nDraw a line in 2D with a color gradient from <code>start</code> to …\nDraw a wireframe rectangle in 3D.\nDraw a wireframe rectangle in 2D.\nDraw a wireframe cuboid with rounded corners in 3D.\nDraw a wireframe rectangle with rounded corners in 3D.\nDraw a wireframe rectangle with rounded corners in 2D.\nDraws the shortest arc between two points (<code>from</code> and <code>to</code>) …\nDraw a wireframe sphere in 3D made out of 3 circles around …\nA builder returned by <code>Gizmos::grid</code> and <code>Gizmos::grid_2d</code>\nA builder returned by <code>Gizmos::grid_3d</code>\nDraws a grid, by drawing lines with the stored <code>Gizmos</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeclare that all outer edges of the grid should be drawn. …\nDeclare that all outer edges of the grid should be drawn. …\nDeclare that the outer edges of the grid along the x axis …\nDeclare that the outer edges of the grid along the x axis …\nDeclare that the outer edges of the grid along the y axis …\nDeclare that the outer edges of the grid along the y axis …\nDeclare that the outer edges of the grid along the z axis …\nSkews the grid by <code>tan(skew)</code> in the x, y and z directions. …\nSkews the grid by <code>tan(skew)</code> in the x and y directions. <code>skew</code>…\nSkews the grid by <code>tan(skew)</code> in the x direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the x direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the y direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the y direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the z direction. <code>skew</code> is in …\nTake the color provided by <code>LightGizmoConfigGroup</code> depending …\nConfigures how a color is attributed to a light gizmo.\nThe <code>GizmoConfigGroup</code> used to configure the visualization …\nA <code>Plugin</code> that provides visualization of <code>PointLight</code>s, …\nUser-specified color.\nTake the color of the represented light.\nAdd this <code>Component</code> to an entity to draw any of its lights …\nRandom color derived from the light’s <code>Entity</code>.\nDefault color strategy for all light gizmos.\nDefault color strategy for this light gizmo. if <code>None</code>, use …\n<code>Color</code> to use for drawing a <code>DirectionalLight</code> gizmo when …\nDraw a gizmo for all lights if true.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Color</code> to use for drawing a <code>PointLight</code> gizmo when …\n<code>Color</code> to use for drawing a <code>SpotLight</code> gizmo when …\nA module for rendering each of the 2D <code>bevy_math::primitives</code>…\nA module for rendering each of the 3D <code>bevy_math::primitives</code>…\nBuilder for configuring the drawing options of <code>Annulus</code>.\nA trait for rendering 2D geometric primitives (<code>P</code>) with …\nBuilder for configuring the drawing options of <code>Line2d</code>.\nThe output of <code>primitive_2d</code>. This is a builder to set …\nBuilder for configuring the drawing options of <code>Segment2d</code>.\nSet the drawing mode of the line (arrow vs. plain line)\nSet the drawing mode of the line (arrow vs. plain line)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the number of line-segments for the inner circle of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of line-segments for the outer circle of …\nRenders a 2D primitive with its associated details.\nSet the number of line-segments for each circle of the …\nBuilder for configuring the drawing options of <code>Capsule3d</code>.\nBuilder for configuring the drawing options of <code>Cone</code>.\nBuilder for configuring the drawing options of …\nBuilder for configuring the drawing options of <code>Cylinder</code>.\nA trait for rendering 3D geometric primitives (<code>P</code>) with …\nThe output of <code>primitive_3d</code>. This is a builder to set …\nBuilder for configuring the drawing options of <code>Plane3d</code>.\nBuilder for configuring the drawing options of <code>Torus</code>.\nSet the number of axis used to hint the plane.\nSet the number of lines used to approximate the height of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the number of lines used to approximate the height of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of lines in the major (ring) direction.\nSet the number of lines in the minor (tube) direction.\nRenders a 3D primitive with its associated details.\nSet the number of lines used to approximate the top an …\nSet the number of lines used to approximate the capsule …\nSet the number of lines used to approximate the cone …\nSet the number of lines used to approximate the curved …\nSet the number of segments used to hint the plane.\nSet the length of segments used to hint the plane.\nA builder returned by <code>Gizmos::rounded_cuboid</code>\nA builder returned by <code>Gizmos::rounded_rect</code> and …\nChange the resolution of the arcs at the corners of the …\nChange the resolution of the arcs at the edges of the …\nChange the radius of the corners to be <code>corner_radius</code>. The …\nChange the radius of the edges to be <code>edge_radius</code>. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")