searchState.loadedDescShard("bevy_pbr", 0, "The mesh can participate in automatic batching.\nAn ambient light, which lights the entire scene equally.\nHolds <code>AssetId</code>s of the texture or textures that this light …\nA more general form of the <code>FogFalloff::Exponential</code> mode. …\nAn atomic version of <code>MaterialBindGroupId</code> that can be read …\nControls how cascaded shadow mapping works. Prefer using …\nBuilder for <code>CascadeShadowConfig</code>.\nConfiguration of the clustering strategy for clustered …\nConfigure the far z-plane mode used for the furthest depth …\nConfigure the depth-slicing strategy for clustered forward …\nConstant max z-depth\nInformation needed when using CPU mesh instance data …\nThe version of <code>RenderMeshInstanceGpuQueue</code> that omits the […\n<code>ParallaxMappingMethod::Relief</code> with a 5 steps, a reasonable …\nDefault render method used for opaque materials.\nA Directional light.\nA component bundle for <code>DirectionalLight</code> entities.\nControls the resolution of <code>DirectionalLight</code> shadow maps.\nAn exponential fog falloff with a given <code>density</code>.\nA squared exponential fog falloff with a given <code>density</code>.\nA material that extends a base <code>Material</code> with additional …\nA <code>SystemSet</code> that encompasses both …\nHorizontal flipping transform\nVertical flipping transform\nFlipping X 3D transform\nFlipping Y 3D transform\nFlipping Z 3D transform\nHandle for the fog WGSL Shader internal asset\nFixed number of <code>Z</code> slices, <code>X</code> and <code>Y</code> calculated to give …\nAllows switching between different fog falloff modes, and …\nMetadata for fog\nA plugin that consolidates fog extraction, preparation and …\nConfigures the “classic” computer graphics distance fog…\nWhether GPU culling is in use.\nApproximates a fixed Gaussian blur, good when TAA isn’t …\nInformation needed when using GPU mesh instance data …\nThe version of <code>RenderMeshInstanceGpuQueue</code> that contains the\nThe GPU-side representation of the fog configuration that…\nA plugin that builds mesh uniforms on GPU.\nThe render node for the mesh uniform building pass.\nThe mesh had morph targets last frame and so they should …\nThe mesh had a skin last frame and so that skin should be …\nThe mesh had a transform last frame and so is eligible for …\nHardware 2x2.\nThe ID of the lightmap shader.\nBitmask for the 16-bit index into the LOD array.\nThe first bit of the LOD index.\nA marker component for a light probe, which is a cuboid …\nA trait implemented by all components that represent light …\nAdds support for light probes: cuboid bounding regions …\nA GPU buffer that stores information about all light …\nA per-view shader uniform that specifies all the light …\nA component that applies baked indirect diffuse global …\nA plugin that provides an implementation of lightmaps.\nA linear fog falloff that grows in intensity between <code>start</code> …\nMaximum number of joints supported for skinned meshes.\nThe maximum number of each type of light probe that each …\nHow many textures are allowed in the view bind group …\nThe handle to the <code>mesh_preprocess.wgsl</code> compute shader.\nMaterials are used alongside <code>MaterialPlugin</code> and …\nA subset of the <code>Material</code> trait for defining extensions to …\nA component bundle for entities with a <code>Mesh</code> and a <code>Material</code>.\nRender pipeline data for a given <code>Material</code>.\nA key uniquely identifying a specialized <code>MaterialPipeline</code>.\nAdds the necessary ECS resources and render logic to …\nCommon <code>Material</code> properties, calculated for a specific …\nCalculate the required maximum z-depth based on currently …\nBind groups for meshes currently loaded.\nInformation about each mesh instance needed to cull it on …\nA GPU buffer that holds the information needed to cull …\nVarious flags and tightly-packed values on a mesh.\nInformation that has to be transferred from CPU to GPU in …\nAll possible <code>BindGroupLayout</code>s in bevy’s default mesh …\nAll data needed to construct a pipeline for rendering 3D …\nMSAA uses the highest 3 bits for the MSAA log2(sample …\nA key that uniquely identifies a <code>MeshPipelineViewLayout</code>.\nStores the view layouts for every combination of pipeline …\nProvides support for rendering 3D meshes.\nDisable cluster calculations for this view\nThe default value.\nAdd this component to make a <code>Mesh</code> not cast shadows.\nAdd this component to make a <code>Mesh</code> not receive shadows.\nA simple linear interpolation, using a single texture …\nRender method used for opaque materials.\nThe parallax mapping method to use to compute depth based …\nA component bundle for PBR entities with a <code>Mesh</code> and a …\nSets up the entire PBR infrastructure of bevy.\n<code>CameraProjection</code> specific PBR functionality.\nA light that emits light in all directions from a central …\nA component bundle for <code>PointLight</code> entities.\nData prepared for a <code>Material</code> instance.\nSets up everything required to use the prepass pipeline.\nSets up the prepasses for a <code>Material</code>.\nThe compute shader bind group for the mesh uniform …\nThe pipeline for the GPU mesh preprocessing shader.\nSpecifies variants of the mesh preprocessing shader.\nThe compute shader pipelines for the mesh uniform building …\nA 2% contrast threshold was originally proposed by …\nDiscovers the best depth value based on binary search.\nStores data for all lightmaps in the render world.\nCPU data that the render world keeps for each entity, when …\nVarious useful flags for [<code>RenderMeshInstance</code>]s.\nCPU data that the render world needs to keep for each …\nInformation that is gathered during the parallel portion …\nThe per-thread queues used during …\nCPU data that the render world needs to keep about each …\nInformation that the render world keeps about each entity …\nInformation that the render world keeps about each entity …\nInformation that the render world keeps about each entity …\nData that <code>crate::material::queue_material_meshes</code> and …\nA component, part of the render world, that stores the …\nThe mesh casts shadows.\nBundle to apply screen space ambient occlusion.\nPlugin for screen space ambient occlusion.\nComponent to apply screen space ambient occlusion to a 3d …\nA GPU buffer that stores the screen space reflection …\nA convenient bundle to add screen space reflections to a …\nThe node in the render graph that traces screen space …\nInformation relating to the render pipeline for the screen …\nIdentifies which screen space reflections render pipeline …\nIdentifies a specific configuration of the SSR pipeline …\nEnables screen-space reflections for a camera.\nAdd this component to a camera to enable <em>screen-space </em>…\nA version of <code>ScreenSpaceReflectionsSettings</code> for upload to …\nSets the bind group for a given <code>Material</code> at the configured …\nData used to bin each object in the shadow map phase.\nAdd this component to a <code>Camera3d</code> to control how to …\nOne single cluster. Optimal for low-light complexity …\nMaps each skinned mesh to the applicable offset within the …\nThe GPU buffers containing joint matrices for all skinned …\nA light that emits light in a given direction from a …\nA component bundle for spot light entities\nA material with “standard” properties used in PBR …\nBitflags info about the material a shader is currently …\nThe pipeline key for <code>StandardMaterial</code>, packed into 64 bits.\nThe GPU representation of the uniform data of a …\nA randomized filter that varies over time, good when TAA …\nAdd this component to make a <code>Mesh</code> using a PBR material …\nAn enum to define which UV attribute to use for a texture. …\nThe volumetric fog shader.\nInserted on each <code>Entity</code> with an <code>ExtractedView</code> to keep …\nIf the light probe can be attached to the view itself (as …\nA component attached to each camera in the render world …\nA component that stores the offset within the …\nSpecifies the offset within the <code>VolumetricFogUniformBuffer</code> …\nThe node in the render graph, part of the postprocessing …\nThe GPU pipeline for the volumetric fog postprocessing …\nIdentifies a single specialization of the volumetric fog …\nA plugin that implements volumetric fog.\nWhen placed on a <code>Camera3d</code>, enables volumetric fog and …\nThe same as <code>VolumetricFogSettings</code>, but formatted for the …\nThe GPU buffer that stores the <code>VolumetricFogUniform</code> data.\nAdd this component to a [<code>DirectionalLight</code>] with a shadow …\nA convenient alias for …\nExplicit <code>X</code>, <code>Y</code> and <code>Z</code> counts (may yield non-square <code>X/Y</code> …\nThe 3D center of the AABB in model space, padded with an …\nThe 3D extents of the AABB in model space, divided by two, …\nThe absorption coefficient, which measures what fraction …\nControls if <code>DeferredPbrLightingPlugin</code> is added.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nWhen the alpha mode mask flag is set, any base color alpha …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nThe <code>AlphaMode</code> of this material.\nHow to apply the alpha channel of the <code>base_color_texture</code>.\nColor of the ambient light.\nThe brightness of the ambient light.\nThe direction of increased roughness, in radians relative …\nIncreases the roughness along a specific direction, so …\nThe object.\nThe resulting (non-absorbed) color after white light …\nColor white light takes after travelling through the …\nHow far, on average, light travels through the volume …\nHow far light travels through the volume underneath the …\nThe color of the surface of the material before lighting.\nDoubles as diffuse albedo for non-metallic, specular for …\nThe UV channel to use for the …\nThe texture component of the material’s color before …\nThe bind group layout for the compute shader.\nWhether binding arrays (a.k.a. bindless textures) are …\nNumber of steps in a bisection (binary search) to perform …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe (positive) distance to the far boundary of each …\nA direct scale factor multiplied with <code>color</code> before being …\nReturns the cascade config as specified by this builder.\nAn extra thin translucent layer on top of the main PBR …\nThe roughness of the clearcoat material. This is specified …\nThe color of the fog effect.\nThe color of this light source.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreates an instance of <code>RenderViewLightProbes</code> containing …\nWhether to cull the “front”, “back” or neither …\nMaps each skinned mesh to the applicable offset within …\nStores all the joint matrices for skinned meshes in the …\nThe index of the <code>MeshInputUniform</code> in the buffer.\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s deferred fragment shader. If …\nReturns this material’s deferred fragment shader. If …\nUsed for selecting the deferred lighting pass for deferred …\nID for specifying which deferred lighting pass should be …\nThe deferred prepass, needed for SSR.\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nThe density of fog, which measures how dark the fog is.\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nAdjust rendered depth.\nThe depth map used for parallax mapping.\nThe depth prepass, needed for SSR.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe amount of light transmitted <em>diffusely</em> through the …\nAmount of diffuse light transmitted through the material\nThe pipeline used for CPU culling. This pipeline doesn’t …\nColor used to modulate the influence of directional light …\nThe exponent applied to the directional light alignment …\nSupport two-sided lighting by automatically flipping the …\nThe function used to draw.\nColor the material “emits” to the camera.\nThe UV channel to use for the …\nThe weight in which the camera exposure influences the …\nThe emissive map, multiplies pixels with <code>emissive</code> to get …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nMap of view entity to the visible entities for each …\nEnvironment maps and reflection probes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtracts clusters from the main world from the render …\nExtracts meshes from the main world into the render world, …\nExtracts meshes from the main world into the render world …\nExtracts <code>VolumetricFogSettings</code> and <code>VolumetricLight</code>s from …\nDetermines which falloff mode to use, and its parameters.\nStrategy for how to evaluate the far <code>Z</code> plane of the …\nSets the far bound of the first cascade, relative to the …\nFar <code>Z</code> plane of the first depth slice\nVarious flags.\nThe <code>StandardMaterialFlags</code> accessible in the <code>wgsl</code> shader.\nVarious <code>MeshFlags</code>.\nFlip the texture coordinates of the material.\nNormal map textures authored for DirectX have their …\nConsumes the material and returns a material with flipped …\nThe color of the fog.\nWhether to enable fog for this material.\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new material from a given color\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nGenerates all possible view layouts for the mesh pipeline, …\nLoads a value atomically. Uses <code>Ordering::Relaxed</code> so there …\nGet the <code>BindGroup</code> for <code>GpuMesh</code> with given <code>handle_id</code> and …\nThe pipeline used for GPU culling. This pipeline populates …\nReturns the asset ID or asset IDs of the texture or …\nIlluminance in lux (lumens per square meter), representing …\nThe lightmap texture.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nAngle defining the distance from the spot light direction …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the intensity of this light probe.\nLuminous power in lumens, representing the amount of light …\nLuminous power in lumens, representing the amount of light …\nluminous intensity in lumens per steradian\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of refraction of the material.\nIndex of Refraction\nIrradiance volumes, also known as voxel global …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCalculates the extinction coefficient β, from V and Cₜ, …\nBuilds a unique label for each layout based on the flags\nConstants for operating with the light units: lumens, and …\nScales the light by a fixed fraction.\nApplies a nonphysical color to the light.\nThe exposure (brightness) level of the lightmap, if …\nThe exposure (brightness) level of the lightmap, if …\nFour 16-bit unsigned normalized UV values packed into a …\nFour 16-bit unsigned normalized UV values packed into a …\nIncludes the lightmap texture and uniform.\nExponent to be applied in the linear part of the march.\nThe number of steps to be taken at regular intervals to …\nA slot for the material bind group ID.\nThe maximum distance that Bevy will trace a ray for, in …\nIn how many layers to split the depth maps for parallax …\nIn how many layers to split the depth maps for Steep …\nUsing <code>ParallaxMappingMethod::Relief</code>, how many additional …\nThe maximum shadow distance. Areas further from the camera …\nThe <code>AssetId</code> of the mesh.\nVarious flags.\nThe bits in the <code>MeshPipelineKey</code> for this material.\nHow “metallic” the material appears, within <code>[0.0, 1.0]</code>.\nFrom [0.0, 1.0], dielectric to pure metallic\nThe UV channel to use for the …\nMetallic and roughness maps, stored as a single texture.\nThe minimum shadow distance, which can help improve the …\nThe (positive) distance to the near boundary of the first …\nThe mesh model uniform (transform) and nothing else.\nCreates the bind group for meshes with no skins but morph …\nAlso includes the uniform and <code>MorphAttributes</code> for morph …\nCreates the bind group for meshes with no skins but morph …\nLike <code>MeshLayouts::morphed</code>, but includes a slot for the …\nCreates the bind group for meshes with skins and morph …\nAlso includes both uniforms for skinning and morph …\nCreates the bind group for meshes with skins and morph …\nLike <code>MeshLayouts::morphed_skinned</code>, but includes slots for …\nCreates a new light probe component.\nPrepare the layouts used by the default bevy <code>Mesh</code>.\nThe UV channel to use for the …\nUsed to fake the lighting of bumps and dents on a material.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of shadow cascades. More cascades increases …\nThe UV channel to use for the …\nSpecifies the level of exposure to ambient light.\nReturns if this material should be rendered by the …\nReturns if this material should be rendered by the …\nRender method used for opaque materials. (Where <code>alpha_mode</code> …\nAngle defining the distance from the spot light direction …\nSets the overlap proportion between cascades. The overlap …\nThe proportion of overlap each cascade has with the …\nHow deep the offset introduced by the depth map should be.\nThe depth of the <code>StandardMaterial::depth_map</code> to apply.\nWhich parallax mapping method to use.\n<code>MeshUniform</code>s are stored in arrays in buffers. If storage …\nLinear perceptual roughness, clamped to <code>[0.089, 1.0]</code> in …\nThe maximum PBR roughness level that will enable screen …\nThe identifier of the render pipeline.\nThe pipeline ID for the compute shader.\nPrepares fog metadata and writes the fog-related uniform …\nA system that attaches the mesh uniform buffers to the …\nA system that specializes the <code>mesh_preprocess.wgsl</code> …\nSets up screen space reflection pipelines for each …\nGathers up screen space reflection settings for each …\nA system that marks all view depth textures as readable in …\nSpecializes volumetric fog pipelines for all views with …\nA system that converts <code>VolumetricFogSettings</code>\nControls if the prepass is enabled for the Material. For …\nControls if the prepass is enabled for the <code>StandardMaterial</code>…\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nMaps each skinned mesh to the applicable offset within …\nStores all the joint matrices for skinned meshes in the …\nThe index of the previous mesh input.\nThe index of this mesh’s <code>MeshInputUniform</code> in the …\nFor each view, iterates over all the meshes visible from …\nFor each shadow cascade, iterates over all the meshes “…\nSimulates a light source coming from a spherical volume …\nCut-off for the light’s area-of-effect. Fragments …\nReturns whether the material would like to read from …\nReturns whether the material would like to read from …\nWhether the material would like to read from …\nSpecular intensity for non-metals on a linear scale of …\nSpecular intensity for non-metals on a linear scale of […\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nConstructs <code>RenderMeshQueueData</code> for the given entity, if it …\nIs this material should be rendered by the deferred …\nLinear perceptual roughness, clamped to [0.089, 1.0] in …\nThe scattering coefficient, which measures the fraction of …\nMeasures the fraction of light that’s scattered <em>toward</em> …\nStores a value atomically. Uses <code>Ordering::Relaxed</code> so there …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe component that enables SSR.\nA bias used when sampling shadow maps to avoid “…\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nControls if shadows are enabled for the Material.\nWhether this light casts shadows.\nData that will be placed on the <code>RenderMeshInstanceGpu</code>.\nData shared between both the CPU mesh uniform building and …\nData shared between both the CPU mesh uniform building and …\nGeneral information about the mesh instance.\nReturns true if this entity is eligible to participate in …\nCreates the bind group for skinned meshes with no morph …\nAlso includes the uniform for skinning\nCreates the bind group for skinned meshes with no morph …\nLike <code>MeshLayouts::skinned</code>, but includes slots for the …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nThe amount of light transmitted <em>specularly</em> through the …\nAmount of specular light transmitted through the material\nThe number of raymarching steps to perform.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThickness of the volume beneath the material surface.\nThickness of the volume underneath the material surface\nWhen marching the depth buffer, we only have 2.5D …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe transform of the mesh.\nThe translation of the mesh.\nThe translation of the mesh instance.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether to apply only the base color to this material.\nWhether we’re building <code>MeshUniform</code>s on GPU.\nControls if GPU <code>MeshUniform</code> building is enabled.\nWhether we’re building <code>MeshUniform</code>s on GPU.\nApproximate the root position using the secant method—by …\nThe rectangle within the lightmap texture that the UVs are …\nThe transform applied to the UVs corresponding to …\nThe transform applied to the UVs corresponding to …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nA reference to all the mesh pipeline view layouts.\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nEnables or disables the light\nEnables or disables the light\nEnables or disables the light\nThe current transform.\nAffine 4x3 matrix transposed to 3x4.\nWrites the information needed to do GPU mesh culling to …\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nMultiplier applied to the world distance (within the …\nMultiplier applied to the world distance (within the …\nDistance from the camera where fog is completely opaque, …\nControls how much light is removed due to atmospheric …\nControls how much light is added due to light scattering …\nDistance from the camera where fog is completely …\nHow many additional steps to use at most to find the depth …\nSamples per slice side is also tweakable, but recommended …\nHigher slice count means less noise, but worse performance.\nComponent with a <code>depth_id</code> for specifying which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to the environment map helper shader.\nLike <code>EnvironmentMapLight</code>, but contains asset IDs instead …\nA pair of cubemap textures that represent the surroundings …\nInformation about the environment map attached to the …\nA bundle that contains everything needed to make an entity …\nThe blurry image that represents diffuse radiance …\nThe cubemaps that make up this environment map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks this environment map as a light probe.\nContains a transform that specifies the position of this …\nThe typically-sharper, mipmapped image that represents …\nLabel for the compute shader instance data building pass.\nLabel for the screen space ambient occlusion render node.\nLabel for the screen space reflections pass.\nLabel for the shadow pass node.\nLabel for the volumetric lighting pass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe component that defines an irradiance volume.\nReturns the argument unchanged.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nThe 3D texture that represents the ambient cubes, encoded …\nApproximations for converting the wattage of lamps to …\nPredefined for lux values in several locations.\nThe amount of light (lux) from ambient daylight (not …\nThe amount of light (lux) during the dark limit of civil …\nThe amount of light (lux) during sunrise or sunset on a …\nThe amount of light (lux) in very dark overcast day\nThe amount of light (lux) in direct sunlight.\nThe amount of light (lux) in full daylight (not direct …\nThe amount of light (lux) during a full moon on a clear …\nThe amount of light (lux) in an office building’s …\nThe amount of light (lux) in family living room lights.\nThe amount of light (lux) in a moonless, overcast night …\nThe amount of light (lux) in an office.\nThe amount of light (lux) on a overcast day; typical TV …\nDisables wireframe rendering for any entity it is attached …\nEnables wireframe rendering for any entity it is attached …\nSets the color of the <code>Wireframe</code> of the entity it is …\nA <code>Plugin</code> that draws wireframes.\nIf <code>Self::global</code> is set, any <code>Entity</code> that does not have a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to show wireframes for all meshes. Can be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")