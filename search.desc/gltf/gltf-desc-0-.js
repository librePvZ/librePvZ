searchState.loadedDescShard("gltf", 0, "glTF 2.0 loader\nA typed view into a buffer view.\nA keyframe animation.\nVertex attribute data.\nGLB parsing error.\nA buffer points to binary data representing geometry, …\nA camera’s projection.  A node can reference a camera to …\nRGB or RGBA vertex color.\nJSON deserialization error.\nglTF JSON wrapper.\nContains the error value\nRepresents a runtime error.\nExtra attribute name.\nBinary glTF contents.\nglTF JSON wrapper plus binary payload.\nImage data used to create a texture.\nStandard I/O error.\nJoint indices.\nThe material appearance of a primitive.\nA set of primitives to be rendered.\nA node in the node hierarchy.\nXYZ vertex normals.\nContains the success value\nXYZ vertex positions.\nGeometry to be rendered with the given material.\nResult type for convenience.\nThe root nodes of a scene.\nVertex attribute semantic name.\nJoints and matrices defining a skin.\nXYZW vertex tangents where the <code>w</code> component is a sign value …\nUV texture co-ordinates.\nA texture and its sampler.\nglTF validation error.\nJoint weights.\nAccessors for reading vertex attributes from buffer views.\nReturns an <code>Iterator</code> that visits the accessors of the glTF …\nAnimations, their channels, targets, and samplers.\nReturns an <code>Iterator</code> that visits the animations of the glTF …\nUnwraps the glTF document, without consuming it.\nThe optional BIN section of the <code>.glb</code> file.\nPrimitives for working with binary glTF.\nThe glTF binary payload in the case of binary glTF.\nBuffers and buffer views.\nReturns an <code>Iterator</code> that visits the pre-loaded buffers of …\nCameras and their projections.\nReturns an <code>Iterator</code> that visits the cameras of the glTF …\nReturns the default scene, if provided.\nThe glTF JSON wrapper.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns the extensions required to load and render this …\nReturns the extensions referenced in this .document file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads glTF from pre-deserialized JSON.\nLoads glTF from pre-deserialized JSON without performing …\nLoads glTF from a reader.\nLoads glTF from a reader without performing validation …\nLoads glTF from a slice of bytes.\nLoads glTF from a slice of bytes without performing …\nThe header section of the <code>.glb</code> file.\nImages that may be used by textures.\nReturns an <code>Iterator</code> that visits the pre-loaded images of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the glTF document.\nIterators for walking the glTF node hierarchy.\nContains (de)serializable data structures that match the …\nThe JSON section of the <code>.glb</code> file.\nSupport for the <code>KHR_lights_punctual</code> extension.\nReturns an <code>Iterator</code> that visits the lights of the glTF …\nMaterial properties of primitives.\nReturns an <code>Iterator</code> that visits the materials of the glTF …\nMeshes and their primitives.\nReturns an <code>Iterator</code> that visits the meshes of the glTF …\nReturns an <code>Iterator</code> that visits the nodes of the glTF …\nConvenience function that loads glTF from the file system.\nReturns an <code>Iterator</code> that visits the samplers of the glTF …\nThe glTF node heirarchy.\nReturns an <code>Iterator</code> that visits the scenes of the glTF …\nMesh skinning primitives.\nReturns an <code>Iterator</code> that visits the skins of the glTF …\nTextures and their samplers.\nReturns an <code>Iterator</code> that visits the textures of the glTF …\nReturns an <code>Iterator</code> that visits the pre-loaded buffer …\nA typed view into a buffer view.\nThe component data type.\nSpecifies whether an attribute, vector, or matrix.\nCorresponds to <code>GL_FLOAT</code>.\nCorresponds to <code>GL_SHORT</code>.\nCorresponds to <code>GL_BYTE</code>.\nRepresents items that can be read by an <code>Accessor</code>.\nGeneral iterator for an accessor.\n2x2 matrix.\n3x3 matrix.\n4x4 matrix.\nScalar quantity.\nIterator for accessor with sparse values.\nStandard accessor iterator.\nCorresponds to <code>GL_UNSIGNED_SHORT</code>.\nCorresponds to <code>GL_UNSIGNED_INT</code>.\nCorresponds to <code>GL_UNSIGNED_BYTE</code>.\n2D vector.\n3D vector.\n4D vector.\nReturns the corresponding <code>GLenum</code>.\nReturns the number of components within the buffer view - …\nReturns the data type of components in the attribute.\nSpecifies if the attribute is a scalar, vector, or matrix.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an object of this type from a byte slice.\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the maximum value of each component in this …\nReturns the minimum value of each component in this …\nReturns the equivalent number of scalar quantities this …\nOptional user-defined name for this object.\nSpecifies whether integer data values should be normalized.\nReturns the offset relative to the start of the parent …\nReturns the number of bytes this value represents.\nReturns the size of each component that this accessor …\nContains data structures for sparse storage.\nReturns sparse storage of attributes that deviate from …\nUtility functions.\nReturns the buffer view this accessor reads from.\nCreate an object of this type that represents a zero value.\nThe index data type.\nIndices of those attributes that deviate from their …\nSparse storage of attributes that deviate from their …\nCorresponds to <code>GL_UNSIGNED_SHORT</code>.\nCorresponds to <code>GL_UNSIGNED_INT</code>.\nCorresponds to <code>GL_UNSIGNED_BYTE</code>.\nArray of size <code>count * number_of_components</code> storing the …\nReturns the number of attributes encoded in this sparse …\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe data type of each index.\nReturns an index array of size <code>count</code> that points to those …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe offset relative to the start of the parent buffer view …\nThe offset relative to the start of the parent buffer view …\nReturns the number of bytes this value represents.\nReturns an array of size <code>count * number_of_components</code>, …\nReturns the buffer view containing the sparse indices.\nReturns the buffer view containing the sparse values.\nRepresents items that can be read by an <code>Accessor</code>.\nVisits the items in an <code>Accessor</code>.\nGeneral iterator for an accessor.\nIterator for accessor with sparse values.\nIterator over indices of sparse accessor.\nIterates over a sparse accessor.\nStandard accessor iterator.\n16-bit indices.\n32-bit indices.\n8-bit indices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an object of this type from a byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nConstructor.\nConstructor.\nSupplemental constructor.\nCreate an object of this type that represents a zero value.\nA keyframe animation.\nTargets an animation’s sampler at a node’s property.\nCubic spline interpolation.\nSpecifies an interpolation algorithm.\nLinear interpolation.\nWeights of morph targets.\nSpecifies a property to animate.\nAnimation channel reader.\nXYZW rotation quaternion.\nDefines a keyframe graph (but not its target).\nXYZ scale vector.\nStep interpolation.\nThe node and TRS property that an animation channel …\nXYZ translation vector.\nReturns the parent <code>Animation</code> struct.\nReturns the parent <code>Animation</code> struct.\nReturns the parent <code>Animation</code> struct.\nReturns an <code>Iterator</code> over the animation channels.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal JSON index.\nReturns the internal JSON index.\nReturns the internal JSON index.\nReturns the accessor containing the keyframe input values …\nReturns the keyframe interpolation algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterators.\nOptional user-defined name for this object.\nReturns the target node.\nReturns the accessor containing the keyframe output values.\nReturns the node’s property to modify or the ‘weights…\nConstructs an animation channel reader.\nReturns the sampler in this animation used to compute the …\nReturns an <code>Iterator</code> over the animation samplers.\nReturns the node and property to target.\nUtility functions.\nAn <code>Iterator</code> that visits the channels of an animation.\nAn <code>Iterator</code> that visits the samplers of an animation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRotations of type <code>[f32; 4]</code>.\nWeights of type <code>f32</code>.\nRotations of type <code>[i16; 4]</code>.\nWeights of type <code>i16</code>.\nRotations of type <code>[i8; 4]</code>.\nWeights of type <code>i8</code>.\nMorph-target weight animations.\nMorph target animations.\nAnimation input sampler values of type <code>f32</code>.\nAnimation output sampler values.\nAnimation channel reader.\nRotation animations\nRotation animations.\nAnimation output sampler values of type <code>[f32; 3]</code>.\nXYZ scales of type <code>[f32; 3]</code>.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nStandard accessor iterator.\nStandard accessor iterator.\nStandard accessor iterator.\nAnimation output sampler values of type <code>[f32; 3]</code>.\nXYZ translations of type <code>[f32; 3]</code>.\nRotations of type <code>[u16; 4]</code>.\nWeights of type <code>u16</code>.\nRotations of type <code>[u8; 4]</code>.\nWeights of type <code>u8</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReinterpret rotations as f32.  Lossy if underlying …\nReinterpret morph weights as f32.  Lossy if underlying …\nReinterpret rotations as u16.  Lossy if underlying …\nReinterpret morph weights as u16.  Lossy if underlying …\nReinterpret rotations as u16.  Lossy if underlying …\nReinterpret morph weights as u16.  Lossy if underlying …\nReinterpret rotations as u16.  Lossy if underlying …\nReinterpret morph weights as u16.  Lossy if underlying …\nReinterpret rotations as u16.  Lossy if underlying …\nReinterpret morph weights as u16.  Lossy if underlying …\nCasting iterator adapters for morph target weights.\nVisits the input samples of a channel.\nVisits the output samples of a channel.\nCasting iterator adapters for rotations.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>MorphTargetWeights</code>.\nType which describes how to cast any weight into f32.\nType which describes how to cast any weight into i16.\nType which describes how to cast any weight into i8.\nOutput type.\nType which describes how to cast any weight into u16.\nType which describes how to cast any weight into u8.\nCast from f32.\nCast from i16.\nCast from i8.\nCast from u16.\nCast from u8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>MorphTargetWeights</code> object.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>Rotations</code>.\nType which describes how to cast any weight into f32.\nType which describes how to cast any weight into i16.\nType which describes how to cast any weight into i8.\nOutput type.\nType which describes how to cast any weight into u16.\nType which describes how to cast any weight into u8.\nCast from f32.\nCast from i16.\nCast from i8.\nCast from u16.\nCast from u8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>Rotations</code> object.\n<code>BIN</code> chunk.\nStream ended before we could read the chunk.\nGLB chunk type.\nChunk of this chunkType was not expected.\nRepresents a Glb loader error.\nBinary glTF contents.\nThe header section of a .glb file.\nIo error occured.\n<code>JSON</code> chunk.\nLength specified in GLB header exceeeds that of slice.\nMagic says that file is not glTF.\nUnknown chunk type.\nUnsupported version.\nThe optional BIN section of the <code>.glb</code> file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads binary glTF from a generic stream of data.\nSplits loaded GLB into its three chunks.\nThe header section of the <code>.glb</code> file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe JSON section of the <code>.glb</code> file.\nMust match the length of the parent .glb file.\nMust be <code>b&quot;glTF&quot;</code>.\nWrites binary glTF to a byte vector.\nWrites binary glTF to a writer.\nMust be <code>2</code>.\nlength specified in GLB header.\nchunkLength.\nActual length of data read.\nActual length of data read.\nchunkType error happened at.\nCorresponds to <code>GL_ARRAY_BUFFER</code>.\nBuffer data is contained in the <code>BIN</code> section of binary glTF.\nA buffer points to binary data representing geometry, …\nCorresponds to <code>GL_ELEMENT_ARRAY_BUFFER</code>.\nDescribes a buffer data source.\nSpecifies the target a GPU buffer should be bound to.\nBuffer data is contained in an external data source.\nA view into a buffer generally representing a subset of …\nReturns the parent <code>Buffer</code>.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal JSON index.\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the buffer in bytes.\nReturns the length of the buffer view in bytes.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nReturns the offset into the parent buffer in bytes.\nReturns the buffer data source.\nReturns the stride in bytes between vertex attributes or …\nOptional target the buffer should be bound to.\nA camera’s projection.  A node can reference a camera to …\nValues for an orthographic camera projection.\nDescribes an orthographic projection.\nValues for a perspective camera projection.\nDescribes a perspective projection.\nA camera’s projection.\nAspect ratio of the field of view.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional user-defined name for this object.\nReturns the camera’s projection.\nThe horizontal magnification of the view.\nThe vertical field of view in radians.\nThe vertical magnification of the view.\nThe distance to the far clipping plane.\nThe distance to the far clipping plane.\nThe distance to the near clipping plane.\nThe distance to the near clipping plane.\nImage data used to create a texture.\nDescribes an image data source.\nImage data is contained in an external data source.\nImage data is contained in a buffer view.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nOptional user-defined name for this object.\nReturns the image data source.\nThe image data MIME type.\nThe image data MIME type, if provided.\nThe URI of the external data source.\nThe buffer view containing the encoded image data.\nAn <code>Iterator</code> that visits every accessor in a glTF asset.\nAn <code>Iterator</code> that visits every animation in a glTF asset.\nAn <code>Iterator</code> that visits every buffer in a glTF asset.\nAn <code>Iterator</code> that visits every camera in a glTF asset.\nAn <code>Iterator</code> that visits extension strings required by a …\nAn <code>Iterator</code> that visits extension strings used by a glTF …\nAn <code>Iterator</code> that visits every pre-loaded image in a glTF …\nAn <code>Iterator</code> that visits every light in a glTF asset.\nAn <code>Iterator</code> that visits every material in a glTF asset.\nAn <code>Iterator</code> that visits every mesh in a glTF asset.\nAn <code>Iterator</code> that visits every node in a glTF asset.\nAn <code>Iterator</code> that visits every sampler in a glTF asset.\nAn <code>Iterator</code> that visits every scene in a glTF asset.\nAn <code>Iterator</code> that visits every skin in a glTF asset.\nAn <code>Iterator</code> that visits every texture in a glTF asset.\nAn <code>Iterator</code> that visits every buffer view in a glTF asset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDirectional lights are light sources that act as though …\nLight subcategory.\nA light in the scene.\nPoint lights emit light in all directions from their …\nSpot lights emit light in a cone in the direction of the …\nColor of the light source.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal JSON index.\nIntensity of the light source. <code>point</code> and <code>spot</code> lights use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies the light subcategory.\nOptional user-defined name for this object.\nA distance cutoff at which the light’s intensity may be …\nAngle in radians from centre of spotlight where falloff …\nAngle in radians from centre of spotlight where falloff …\nThe alpha rendering mode of a material.\nThe alpha value is used, to determine the transparency of …\nThe rendered output is either fully opaque or fully …\nThe material appearance of a primitive.\nDefines the normal texture of a material.\nDefines the occlusion texture of a material.\nThe alpha value is ignored and the rendered output is …\nA set of parameter values that are used to define the …\nA set of parameter values that are used to define the …\nParameter values that define a volume for the transmission …\nThe optional alpha cutoff value of the material.\nThe alpha rendering mode of the material.  The material’…\nThe color that white light turns into due to absorption …\nDensity of the medium given as the average distance that …\nReturns the material’s base color factor.\nReturns the base color texture. The texture contains …\nSpecifies whether the material is double-sided.\nThe emissive color of the material.\nParameter value that adjusts the strength of emissive …\nThe emissive map texture.\nGet the value of an extension based on the name of the …\nGet the value of an extension based on the name of the …\nGet the value of an extension based on the name of the …\nGet the value of an extension based on the name of the …\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal JSON index if this <code>Material</code> was …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParameter values that define the index of refraction of …\nReturns the metalness factor of the material.\nThe metallic-roughness texture.\nOptional user-defined name for this object.\nA tangent space normal map.\nThe occlusion map texture.\nParameter values that define the metallic-roughness …\nReturns the roughness factor of the material.\nReturns the scalar multiplier applied to each normal …\nReturns the scalar multiplier controlling the amount of …\nThe set index of the texture’s <code>TEXCOORD</code> attribute.\nReturns the set index of the texture’s <code>TEXCOORD</code> …\nReturns the referenced texture.\nReturns the referenced texture.\nThe thickness of the volume beneath the surface. The value …\nA texture that defines the thickness, stored in the G …\nParameter values that define the transmission of light …\nReturns the material’s transmission factor.\nReturns the transmission texture.\nSpecifies whether the material is unlit.\nParameter values that define a volume for the transmission …\nVertex attribute data.\nVertex position bounding box.\nThe minimum and maximum values for a generic accessor.\nRGB or RGBA vertex color.\nExtra attribute name.\nJoint indices.\nCorresponds to <code>GL_LINE_LOOP</code>.\nCorresponds to <code>GL_LINE_STRIP</code>.\nCorresponds to <code>GL_LINES</code>.\nA set of primitives to be rendered.\nThe type of primitives to render.\nA single morph target for a mesh primitive.\nXYZ vertex normals.\nCorresponds to <code>GL_POINTS</code>.\nXYZ vertex positions.\nGeometry to be rendered with the given material.\nMesh primitive reader.\nVertex attribute semantic name.\nXYZW vertex tangents where the <code>w</code> component is a sign value …\nUV texture co-ordinates.\nCorresponds to <code>GL_TRIANGLE_FAN</code>.\nCorresponds to <code>GL_TRIANGLE_STRIP</code>.\nCorresponds to <code>GL_TRIANGLES</code>.\nJoint weights.\nReturns the equivalent <code>GLenum</code>.\nReturns an <code>Iterator</code> that visits the vertex attributes.\nReturns the bounds of the <code>POSITION</code> vertex attribute.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the accessor with the given semantic.\nReturns the internal JSON index.\nReturns the internal JSON index.\nReturns the accessor containing the primitive indices, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterators.\nReturns the material to apply to this primitive when …\nMaximum value.\nMaximum value.\nMinimum value.\nMinimum value.\nThe type of primitives to render.\nReturns an <code>Iterator</code> that visits the morph targets of the …\nOptional user-defined name for this object.\nReturns the XYZ vertex normal displacements.\nReturns the XYZ vertex position displacements.\nDefines the geometry to be renderered with a material.\nVisits the vertex colors of a primitive.\nVisits the vertex draw sequence of a primitive.\nVisits the joint indices of the primitive.\nVisits the morph targets of the primitive.\nVisits the vertex normals of a primitive.\nVisits the vertex positions of a primitive.\nVisits the vertex tangents of a primitive.\nVisits the vertex texture co-ordinates of a primitive.\nVisits the joint weights of the primitive.\nConstructs the primitive reader.\nReturns the XYZ vertex tangent displacements.\nUtility functions.\nDefines the weights to be applied to the morph targets.\nAn <code>Iterator</code> that visits the attributes of a <code>Primitive</code>.\nAn <code>Iterator</code> that visits the morph targets of a <code>Primitive</code>.\nAn <code>Iterator</code> that visits the primitives of a <code>Mesh</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUV texture co-ordinates of type <code>[f32; 2]</code>.\nWeights of type <code>[f32; 4]</code>.\nVertex colors.\nIndex data.\nVertex joints.\nMorph targets.\nXYZ vertex normal displacements of type <code>[f32; 3]</code>.\nXYZ vertex normals of type <code>[f32; 3]</code>.\nXYZ vertex position displacements of type <code>[f32; 3]</code>.\nXYZ vertex positions of type <code>[f32; 3]</code>.\nXYZ vertex tangent displacements.\nXYZW vertex tangents of type <code>[f32; 4]</code> where the <code>w</code> …\nUV texture co-ordinates.\nWeights.\nRGB vertex color of type <code>[f32; 3]</code>.\nRGB vertex color of type <code>[u16; 3]&gt;</code>.\nRGB vertex color of type <code>[u8; 3]&gt;</code>.\nRGBA vertex color of type <code>[f32; 4]</code>.\nRGBA vertex color of type <code>[u16; 4]&gt;</code>.\nRGBA vertex color of type <code>[u8; 4]&gt;</code>.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nIterator for accessor with sparse values.\nStandard accessor iterator.\nStandard accessor iterator.\nStandard accessor iterator.\nStandard accessor iterator.\nStandard accessor iterator.\nStandard accessor iterator.\nIndex data of type U16\nJoints of type <code>[u16; 4]</code>. Refer to the documentation on …\nUV texture co-ordinates of type <code>[u16; 2]&gt;</code>.\nWeights of type <code>[u16; 4]</code>.\nIndex data of type U32\nIndex data of type U8\nJoints of type <code>[u8; 4]</code>. Refer to the documentation on …\nUV texture co-ordinates of type <code>[u8; 2]&gt;</code>.\nWeights of type <code>[u8; 4]</code>.\nCasting iterator adapters for colors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCasting iterator adapters for vertex indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReinterpret texture coordinates as f32.  Lossy if the …\nReinterpret weights as f32.  Lossy if the underlying …\nReinterpret colors as RGB f32, discarding alpha, if …\nReinterpret colors as RGB u16, discarding alpha, if …\nReinterpret colors as RGB u8, discarding alpha, if …\nReinterpret colors as RGBA f32, with default alpha 1.0.  …\nReinterpret colors as RGBA u16, with default alpha 65535.  …\nReinterpret colors as RGBA u8, with default alpha 255.  …\nReinterpret joints as u16, which can fit any possible …\nReinterpret texture coordinates as u16.  Lossy if the …\nReinterpret weights as u16.  Lossy if the underlying …\nReinterpret indices as u32, which can fit any possible …\nReinterpret texture coordinates as u8.  Lossy if the …\nReinterpret weights as u8.  Lossy if the underlying …\nCasting iterator adapters for joint indices.\nCasting iterator adapters for texture co-ordinates.\nCasting iterator adapters for node weights.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>Colors</code>.\nOutput type.\nType which describes how to cast any color into RGB f32.\nType which describes how to cast any color into RGB u16.\nType which describes how to cast any color into RGB u8.\nType which describes how to cast any color into RGBA f32.\nType which describes how to cast any color into RGBA u16.\nType which describes how to cast any color into RGBA u8.\nCast from RGB f32.\nCast from RGB u16.\nCast from RGB u8.\nCast from RGBA f32.\nCast from RGBA u16.\nCast from RGBA u8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>ReadColors</code> object.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>Indices</code>.\nOutput type.\nType which describes how to cast any index into u32.\nCast from u16.\nCast from u32.\nCast from u8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>Indices</code> object.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>Joints</code>.\nOutput type.\nType which describes how to cast any joint into u16.\nCast from u16.\nCast from u8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>Joints</code> object.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>TexCoords</code>.\nType which describes how to cast any texture coordinate …\nOutput type.\nType which describes how to cast any texture coordinate …\nType which describes how to cast any texture coordinate …\nCast from f32 pair.\nCast from u16 pair.\nCast from u8 pair.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>TexCoords</code> object.\nTrait for types which describe casting behaviour.\nCasting iterator for <code>Weights</code>.\nType which describes how to cast any weight into f32.\nOutput type.\nType which describes how to cast any weight into u16.\nType which describes how to cast any weight into u8.\nCast from f32.\nCast from u16.\nCast from u8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap underlying <code>Weights</code> object.\nDecomposed TRS properties.\n4x4 transformation matrix in column-major order.\nA node in the node hierarchy.\nThe root nodes of a scene.\nThe transform for a <code>Node</code>.\nReturns the camera referenced by this node.\nReturns an <code>Iterator</code> that visits the node’s children.\nReturns a decomposed representation of this transform.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the internal JSON index.\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nIterators.\nReturns the light at this node as defined by the …\nReturns the matrix representation of this transform.\nReturns the mesh referenced by this node.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nReturns an <code>Iterator</code> that visits each root node of the …\nReturns the skin referenced by this node.\nReturns the node’s transform.\nReturns the weights of the instantiated morph target.\n4x4 matrix.\n<code>[x, y, z, w]</code> quaternion, where <code>w</code> is the scalar.\n<code>[x, y, z]</code> vector.\n<code>[x, y, z]</code> vector.\nAn <code>Iterator</code> that visits the children of a node.\nAn <code>Iterator</code> that visits the nodes in a scene.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSkin reader.\nJoints and matrices defining a skin.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nReturns the accessor containing the 4x4 inverse-bind …\nIterators.\nReturns an <code>Iterator</code> that visits the skeleton nodes used as …\nOptional user-defined name for this object.\nConstructs a skin reader.\nReturns the node used as the skeleton root. When <code>None</code>, …\nUtility functions.\nAn <code>Iterator</code> that visits the joints of a <code>Skin</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInverse Bind Matrices of type <code>[[f32; 4]; 4]</code>.\nSkin reader.\nIterator for accessor with sparse values.\nStandard accessor iterator.\nReturns an <code>Iterator</code> that reads the inverse bind matrices of\nCorresponds to <code>GL_CLAMP_TO_EDGE</code>.\nA reference to a <code>Texture</code>.\nCorresponds to <code>GL_LINEAR</code>.\nCorresponds to <code>GL_LINEAR</code>.\nCorresponds to <code>GL_LINEAR_MIPMAP_LINEAR</code>.\nCorresponds to <code>GL_LINEAR_MIPMAP_NEAREST</code>.\nMagnification filter.\nMinification filter.\nCorresponds to <code>GL_MIRRORED_REPEAT</code>.\nCorresponds to <code>GL_NEAREST</code>.\nCorresponds to <code>GL_NEAREST</code>.\nCorresponds to <code>GL_NEAREST_MIPMAP_LINEAR</code>.\nCorresponds to <code>GL_NEAREST_MIPMAP_NEAREST</code>.\nCorresponds to <code>GL_REPEAT</code>.\nTexture sampler properties for filtering and wrapping …\nA texture and its sampler.\nMany techniques can be used to optimize resource usage for …\nTexture co-ordinate wrapping mode.\nOpenGL enum\nReturns the corresponding OpenGL enum value.\nReturns the corresponding OpenGL enum value.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nQueries extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nReturns extension data unknown to this crate version.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nOptional application specific data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal JSON index if this <code>Sampler</code> was …\nReturns the internal JSON index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMagnification filter.\nMinification filter.\nOptional user-defined name for this object.\nOptional user-defined name for this object.\nThe offset of the UV coordinate origin as a factor of the …\nRotate the UVs by this many radians counter-clockwise …\nReturns the sampler used by this texture.\nThe scale factor applied to the components of the UV …\nReturns the image used by this texture.\nOverrides the textureInfo texCoord value if supplied, and …\nThe set index of the texture’s <code>TEXCOORD</code> attribute.\nReturns the referenced <code>Texture</code>.\nReturns texture transform information\n<code>s</code> wrapping mode.\n<code>t</code> wrapping mode.")