searchState.loadedDescShard("bevy_inspector_egui", 0, "This crate contains\n<code>bevy_app::Plugin</code> used to register default <code>InspectorOptions</code> …\nMap of <code>Target</code>s to arbitrary <code>TypeData</code> used to control how …\nDerive macro used to derive <code>InspectorOptions</code>\nMethods for displaying <code>bevy</code> resources, assets and entities\nReturns the argument unchanged.\nReturns the argument unchanged.\nCustom UI implementations for specific types. Check …\nWay of associating options to fields using <code>InspectorOptions</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReexports of commonly used types\nEasy plugins for showing UI panels.\nGeneral-purpose machinery for displaying <code>Reflect</code> types …\nA view into the world which may only access certain …\nGuesses an appropriate entity name like <code>Light (6)</code> or falls …\nUI for displaying the entity hierarchy\nShort circuiting methods for the <code>InspectorUi</code> to enable it …\nDisplay all reflectable assets\nDisplay all assets of the specified asset type <code>A</code>\nDisplay the given entity with all its components and …\nDisplay the components of the given entity\nDisplay the given entity with all its components and …\nDisplay the resource <code>R</code>\nDisplay all reflectable resources in the world\nDisplay state <code>T</code> and change state on edit\nDisplay a single <code>&amp;mut dyn Reflect</code>.\nDisplay <code>Entities</code>, <code>Resources</code> and <code>Assets</code> using their …\nDisplay all entities and their components\nDisplay all entities matching the given filter\nDisplay a given asset by handle and asset <code>TypeId</code>\nDisplay all assets of the given asset <code>TypeId</code>\nDisplay the resource with the given <code>TypeId</code>\n<code>Ctrl</code>\n<code>Shift</code>\nNo modifiers\nCollection of currently selected entities\nKind of selection modifier\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDisplay UI of the entity hierarchy.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDropdown widget\nPasses through the desired width value to the underlying …\nDetermine whether to filter box items based on what is in …\nReturns the argument unchanged.\nCreates new dropdown box.\nAdd a hint text to the Text Edit\nCalls <code>U::from(self)</code>.\nDetermine whether to select the text when the Text Edit …\nFunction pointers for displaying a concrete type, to be …\nCustom UI implementation for a concrete type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>InspectorEguiImpl</code> from functions displaying a …\nRegister <code>InspectorEguiImpl</code>s for <code>bevy</code> types\nRegister <code>InspectorEguiImpl</code>s for <code>bevy_math</code>/<code>glam</code> types\nRegister <code>InspectorEguiImpl</code>s for primitive rust types as …\nMap of <code>Target</code>s to arbitrary <code>TypeData</code> used to control how …\nDerive macro used to derive <code>InspectorOptions</code>\nHelper trait for the <code>InspectorOptions</code> macro.\nCan be arbitrary types which will be passed to …\nWrapper of <code>InspectorOptions</code> to be stored in the …\nDescriptor of a path into a struct/enum. Either a <code>Field</code> (…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions for dealing with common types such as numbers or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive macro used to derive <code>InspectorOptions</code>\nDerive macro used to derive <code>InspectorOptions</code>\nPlugin displaying an egui window for all assets of type <code>A</code>. …\nPlugin displaying an egui window for all entities matching …\nPlugin displaying an egui window for a single resource. …\nPlugin displaying an egui window for an app state. …\nPlugin displaying a egui window with an entity list, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly show the UI of the specified condition is active\nOnly show the UI of the specified condition is active\nOnly show the UI of the specified condition is active\nOnly show the UI of the specified condition is active\nOnly show the UI of the specified condition is active\nFunction which will be executed for every field …\nFunction which will be executed for every field …\nFunction which will be executed for every field …\n<code>Context</code> with additional data that can be used to display …\n<code>InspectorUi</code> with short circuiting methods able to display …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction which will be executed for every field …\nSame as <code>short_circuit</code>, but for read only usage.\nReference to the <code>TypeRegistry</code>\nDraws the inspector UI for the given value.\nDraws the inspector UI for the given value in a read-only …\nDraws the inspector UI for the given value with some …\nDraws the inspector UI for the given value with some …\nDisplay the value without any <code>Context</code> or short circuiting …\nDisplay the readonly value without any <code>Context</code> or short …\nA view into the world which may only access certain …\nWhether the given component at the entity may be accessed …\nWhether the resource with the given <code>TypeId</code> may be accessed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference in form of a <code>&amp;mut dyn Reflect</code> to …\nGets a mutable reference to the resource of the given type\nGets a mutable reference in form of a <code>&amp;mut dyn Reflect</code> to …\nGets mutable reference to two resources. Panics if <code>R1 = R2</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RestrictedWorldView</code> with permission to access …\nSplits the world into one view which may only be used for …\nSplits this view into one view that only has access the …\nSplits this view into one view that only has access the …\nSplits this view into one view that only has access the …\nLike <code>RestrictedWorldView::split_off_resource</code>, but takes …")