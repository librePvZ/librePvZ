searchState.loadedDescShard("reanim_decode", 0, "reanim-decode: decoder for PvZ reanim files.\nCommand line interface for <code>reanim-decode</code>.\nDefinition and decoding logic for <code>.reanim.compiled</code> files.\nBinary streams for decoding <code>.reanim.compiled</code> files.\nOriginal XML format for <code>.reanim</code> files.\nConversion for animation files.\nBinary encoding using <code>bincode</code>. Only support packed format.\nEntry of the command line interface.\nSubcommands.\nOriginal “compiled format”: file extension …\nOutput format: JSON and YAML supported, guarded by crate …\nInternal encoding (Rust <code>{:#?}</code> debug pretty printing)\nJSON format.\nOptionally packed animations.\nConversion for model files.\nPacked format, compact and structural.\nPlain format, structurally equivalent to reanim XML.\nOutput format: JSON and YAML supported, guarded by crate …\nXML format as is used in original PvZ game.\nYAML format.\nAll available subcommands.\nDecide an input/output format for a given (option, path, …\nEncode the animation into required format.\nEncode the model into required format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInfer a format from given file name.\nInfer whether or not the output should be packed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForce this to be packed, fail if unpacking is requested.\nIs this already packed?\nStart command line interface.\nVerbosity, for filtering diagnostics messages.\nInput file path.\nInput file path.\nInput format.\nInput format.\nOutput file path.\nOutput file path.\nOutput format.\nOutput format.\nUse structural format for input.\nUse structural format for output.\nAnimation in a <code>.reanim</code> file.\nAn element in a <code>Frame</code>.\nA frame in a <code>Track</code>, consist of (optional) image, text, and …\nA single track in an <code>Animation</code>.\nA transformation.\nDecode a <code>.reanim</code> or <code>.reanim.compiled</code> file. Performs …\nElements: image and text (with font).\nFrames per second, typically 12.\nFrames, possibly grouped into several parts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of this track for internal use.\nAll tracks in this animation.\nTransformation: translation, skew, rotation, etc.\nBuilder type for the arguments.\nCommon entry for decoding binary data.\nDecoding errors.\nConvenience methods for <code>Decode</code> without arguments.\nCannot decode UTF-8 strings.\nContains the error value\nNot enough bytes when decoding some <code>PlainData</code>.\nInvalid byte sequence for some <code>PlainData</code>.\n32bit magic sequence.\nIncorrect magic number.\nInterface for named arguments in a <code>Decode</code>.\nTrivial <code>NamedArgs::ArgsBuilder</code>.\nContains the success value\nPlain old data, with a constant size known in advance.\nResult type specialised for <code>DecodeError</code>. Can also be used …\nSize of this data in bytes.\nStream decoding API on top of <code>Read</code>.\nSuperfluous bytes after decoding finished. EOF expected.\nName of this type, used in diagnostics.\nCreate a new argument builder.\nDecode and assert a 32bit magic.\nDecode complex data at current position in the <code>Stream</code>, …\nDecode complex data at current position in the <code>Stream</code>.\nDrop some information we possibly do not understand yet.\nFinish building the arguments, which is nothing here.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode from a byte sequence.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecode a length <code>n</code>, and an array of <code>n</code> <code>Decode</code> at the start …\nDecode a <code>PlainData</code> at the start of this stream.\nDecode a series of <code>N</code> <code>Decode</code> at the start of this stream.\nConvenience function for <code>read::&lt;Option&lt;T&gt;&gt;</code>.\nDecode a length <code>n</code>, and then a string of length <code>n</code>.\nExpected magic byte sequence.\nThe invalid bytes coming after the valid prefix.\nReal bytes in the binary file.\nThe string is valid until this point.\nDisplay in XML format.\nWrapper for formatting using <code>DisplayXml</code>.\n<code>Display</code>-like API.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvenience function: convert to XML string.")