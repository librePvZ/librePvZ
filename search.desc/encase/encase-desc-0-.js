searchState.loadedDescShard("encase", 0, "Provides a mechanism to lay out data into GPU buffers …\nHelper type meant to be used together with the <code>ShaderType</code> …\nTrait implemented for WGSL runtime-sized arrays and WGSL …\nDynamic storage buffer wrapper facilitating RW operations\nDynamic uniform buffer wrapper facilitating RW operations\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nTrait implemented for all WGSL fixed-footprint types\nBase trait for all WGSL host-shareable types\nUsed to implement <code>ShaderType</code> for structs\nStorage buffer wrapper facilitating RW operations\nUniform buffer wrapper facilitating RW operations\nAsserts that <code>Self</code> meets the requirements of the uniform …\nAsserts that <code>Self</code> meets the requirements of the uniform …\nReturns the size of <code>Self</code> assuming the (contained) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nUsed to implement <code>ShaderType</code> for the given vector type\nUsed to implement <code>ShaderType</code> for the given wrapper type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing items necessary to implement <code>ShaderType</code> …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nCreates a new dynamic storage buffer wrapper with an …\nCreates a new dynamic uniform buffer wrapper with an …\nCreates a new dynamic storage buffer wrapper with a given …\nCreates a new dynamic uniform buffer wrapper with a given …\nModule containing items necessary to implement <code>ShaderType</code> …\nReturns the size of <code>Self</code> at runtime\nReturns the size of <code>Self</code> at runtime\nModule containing items necessary to implement <code>ShaderType</code> …\nHelper type for alignment calculations\nContains the error value\nContains the success value\nHelper type for size calculations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an alignment that is the smallest power of two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>n</code> is a multiple of this alignment\nReturns the max alignment from an array of alignments\nReturns the amount of padding needed so that <code>n + padding</code> …\nWill round up the given <code>n</code> so that the returned value will …\nWill round up the given <code>n</code> so that the returned value will …\nlength of the contained runtime sized array\nmax elements to read into the contained runtime sized array\nEnables writing to the matrix (via <code>&amp;mut [[T; R]; C]</code>)\nEnables reading from the matrix (via <code>&amp;[[T; R]; C]</code>)\nEnables the creation of a matrix (via <code>[[T; R]; C]</code>)\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nEnables writing to the vector (via <code>&amp;mut [T; N]</code>)\nEnables reading from the vector (via <code>&amp;[T; N]</code>)\nEnables the creation of a vector (via <code>[T; N]</code>)\nUsed to implement <code>ShaderType</code> for the given vector type")