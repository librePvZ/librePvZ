searchState.loadedDescShard("bevy_egui", 0, "This crate provides an Egui integration for the Bevy game …\nBegins the <code>egui</code> frame.\nA resource for accessing clipboard.\nA component for storing <code>bevy_egui</code> context.\nQueries all the Egui related components.\nAutomatically generated [<code>WorldQuery</code>] item type for …\nAutomatically generated [<code>WorldQuery</code>] type for a read-only …\nAutomatically generated [<code>WorldQuery</code>] item type for …\nA helper SystemParam that provides a way to get …\nIs used for storing Egui context input..\nRepresents a texture allocated and painted by Egui.\nContains textures allocated and painted by Egui.\nIs used for storing Egui output.\nAdds all Egui resources and render graph nodes.\nIs used for storing Egui shapes and textures delta.\nThe <code>bevy_egui</code> plugin system sets.\nA resource for storing global UI settings.\nThe <code>bevy_egui</code> plugin startup system sets.\nA resource for storing <code>bevy_egui</code> user textures.\nInitializes Egui contexts for available windows.\nInitializes Egui contexts for newly created windows.\nReads Egui inputs (keyboard, mouse, etc) and writes them …\nProcesses the <code>EguiOutput</code> resource.\nStores physical size and scale factor, is used as a helper …\nCan accept either a strong or a weak handle.\nCan accept either a strong or a weak handle.\nStored in full so we can do partial updates (which bevy …\nAutomatically generated read-only field for accessing …\nEgui context associated with the window.\nEgui context associated with the window.\nEgui context associated with the window.\nEgui context of a specific window.\nAllows to get multiple contexts at the same time. This …\nEgui context of the primary window.\nWill be used as a default value for hyperlink target hints.\nAutomatically generated read-only field for accessing …\nEncapsulates <code>egui::RawInput</code>.\nEncapsulates <code>egui::RawInput</code>.\nEncapsulates <code>egui::RawInput</code>.\nEgui render node.\nAutomatically generated read-only field for accessing …\nEncapsulates <code>egui::PlatformOutput</code>.\nEncapsulates <code>egui::PlatformOutput</code>.\nEncapsulates <code>egui::PlatformOutput</code>.\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets clipboard contents. Returns <code>None</code> if clipboard …\nBorrows the underlying Egui context mutably.\nAssets store handle.\nReturns the height of the window.\nReturns an associated Egui texture id.\nReturns an associated Egui texture id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the output has no Egui shapes and no …\nThe names of <code>bevy_egui</code> nodes.\nPairs of rectangles and paint commands.\nPhysical height\nPhysical width\nThe field gets updated during the <code>EguiSet::ProcessOutput</code> …\nRemoves the image handle and an Egui texture id associated …\nRemoves the image handle and an Egui texture id associated …\nAutomatically generated read-only field for accessing …\nEgui shapes and textures delta.\nEgui shapes and textures delta.\nEgui shapes and textures delta.\nPlugin systems for the render app.\nGlobal scale factor for Egui widgets (<code>1.0</code> by default).\nScale factor\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nSets clipboard contents.\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nAdds bevy_egui components to newly created windows.\nPlugin systems.\nThe change in egui textures since last frame.\nFallible variant of <code>EguiContexts::ctx_for_window_mut</code>.\nFallible variant of <code>EguiContexts::ctx_mut</code>.\nUpdates textures painted by Egui.\nReturns the width of the window.\nAutomatically generated read-only field for accessing …\n<code>Window</code> component.\n<code>Window</code> component.\n<code>Window</code> component.\nAutomatically generated read-only field for accessing …\nWindow entity.\nWindow entity.\nWindow entity.\nAutomatically generated read-only field for accessing …\nStores physical size of the window and its scale factor.\nStores physical size of the window and its scale factor.\nStores physical size of the window and its scale factor.\nEgui shader.\nEgui render node.\nEgui render pipeline.\nKey for specialized pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs Egui render node.\nTexture bind group layout.\nTexture format of a window’s swap chain to render to.\nTransform bind group layout.\nThe main egui pass.\n<code>RenderLabel</code> type for the Egui pass.\nCached Pipeline IDs for the specialized <code>EguiPipeline</code>s\nMaps Egui textures to bind groups.\nCorresponds to Egui’s <code>egui::TextureId</code>.\nScale and translation for rendering Egui shapes. Is needed …\nDescribes the transform buffer.\nThe extracted version of <code>EguiManagedTextures</code>.\nExtracted Egui settings.\nExtracted Egui textures.\nTextures allocated via Egui.\nTextures allocated via Bevy.\nBind group.\nUniform buffer.\nMaps Egui managed texture ids to Bevy image handles.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the transform from window size and scale factor.\nReturns an iterator over all textures (both Egui and Bevy …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffsets for each window.\nPrepares Egui transforms.\nQueues bind groups.\nQueue <code>EguiPipeline</code>s specialized on each window’s swap …\nIs affected by window size and <code>EguiSettings::scale_factor</code>.\nSets up the pipeline for newly created windows.\nNormally equals <code>Vec2::new(-1.0, 1.0)</code>.\nMaps Bevy managed texture handles to Egui user texture ids.\nGeneration of the window entity.\nIndex of the window entity.\nStores “pressed” state of modifier keys. Will be …\nMarks frame start for Egui.\nMatches the implementation of …\nMatches the implementation of …\nConsumes all the events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses Bevy input and feeds it to Egui.\nReads Egui output.\nInitialises Egui contexts (for multiple windows).")