searchState.loadedDescShard("bevy_audio", 0, "Audio support for the game engine Bevy\nA trait that allows adding a custom audio source to the …\nBundle for playing a standard bevy audio asset\nLoads files as <code>AudioSource</code> <code>Assets</code>\nAdds support for audio playback to a Bevy Application\nUsed to control audio during playback.\nCommon interactions with an audio sink.\nA source of audio data\nBundle for playing a sound.\nA trait for working generically across different <strong>Sample</strong> …\nWill play the associated audio source once and despawn the …\nA type implementing this trait can be converted to a …\nThe type of the iterator of the audio samples, which …\nThe type of the audio samples. Usually a <code>u16</code>, <code>i16</code> or <code>f32</code>, …\nThe default scale factor applied to the positions of audio …\nDespawn the entity and its children when the sound …\nThe equilibrium value for the wave that this <code>Sample</code> type …\nWhen multiplying two samples of a signal together, it is …\nUse this <code>Resource</code> to control the global volume of all …\nThe multiplicative identity of the signal.\nWill play the associated audio source in a loop.\nRepeat the sound forever.\nWill play the associated audio source once.\nPlay the sound once. Do nothing when it ends.\nA source of sine wave sound\nBundle for playing a bevy note sound\nThe way Bevy manages the sound playback.\nInitial settings to be used when audio starts playing. If …\nWill play the associated audio source once and remove the …\nRemove the audio components from the entity, when the …\nRepresents a value of a single sample.\nWhen summing two samples of a signal together, it is …\nA source of samples.\nUsed to control spatial audio during playback.\nSettings for the listener for spatial audio sources.\nA scale factor applied to the positions of audio sources …\nA volume level equivalent to a non-negative float.\nZero (silent) volume level\nAdds (or “offsets”) the amplitude of the <code>Sample</code> by the …\nRegisters an audio source. The type must implement …\nMultiplies the value of this sample by the given amount.\nAmplifies the sound by the given value.\nStores the source in a buffer in addition to returning it. …\nRaw data of the audio source.\nReturns the number of channels. Channels are always …\nConverts the samples of this source to another type.\nReturns the number of samples before the current frame …\nBuild and return a <code>Self::Decoder</code> of the implementing type\nThe scale factor applied to the positions of audio sources …\nDelays the sound by a certain duration.\nDuration for which sound will be played\nReturns true if this sink has no more sounds to play.\nFades in the sound.\nFrequency at which sound will be played\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>.\nGet the value of the volume level.\nThe global volume for all audio entities.\nApplies a high-pass filter to the source.\nApplies a high-pass filter to the source while allowing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this sink paused?\nLeft ear position relative to the <code>GlobalTransform</code>.\nLinear interpolation between two samples.\nProcesses the asset in an asynchronous closure.\nApplies a low-pass filter to the source. <strong>Warning</strong>: Probably …\nApplies a low-pass filter to the source while allowing the …\nMixes this source with another one.\nThe desired playback behavior.\nMultiplies (or “scales”) the amplitude of the <code>Sample</code> …\nCreate a new volume level.\nCreates a new <code>SpatialListener</code> component.\nCreate a new <code>GlobalVolume</code> with the given volume.\nCreate a new <code>SpatialScale</code> with the same value for all 3 …\nCreates a new note\nCreate a new <code>SpatialScale</code> with the same value for <code>x</code> and <code>y</code>, …\nMakes the sound pausable.\nPauses playback of this sink.\nHelper to start in a paused state.\nCreate the sink in paused state. Useful for “deferred …\nCalls the <code>access</code> closure on <code>Self</code> the first time the source …\nResumes playback of a paused sink.\nRepeats this source forever.\nAdds a basic reverb effect.\nRight ear position relative to the <code>GlobalTransform</code>.\nReturns the rate at which the source should be played. In …\nCalls <code>saturating_add</code> on the sample.\nSet the two ears position.\nSet the emitter position.\nSet the listener position, with an ear on each side …\nChanges the speed of the sound.\nChanges the volume of the sound.\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nImmediately skips a certain duration of this source.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nEnables spatial audio for this source.\nOptional scale factor applied to the positions of this …\nGets the speed of the sound.\nChanges the play speed of the sound. Does not adjust the …\nSpeed to play at.\nStops the sink.\nMakes the sound stoppable.\nMixes this sound fading out with another sound fading in …\nTakes a certain duration of this source and then stops.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConvert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nToggles the playback of this sink.\nToggles the playback of this sink.\nReturns the total duration of this source, if known.\nAttempts to seek to a given position in the current source.\nGets the volume of the sound.\nVolume to play at.\nThe global volume of all audio.\nHelper to enable or disable spatial audio.\nHelper to use a custom spatial scale.\nHelper to set the speed from start of playback.\nHelper to set the volume from start of playback.\nReturns the value corresponding to the absence of sound.")