searchState.loadedDescShard("bevy_core_pipeline", 0, "Adds a skybox to a 3D camera, based on a cubemap texture.\nScale factor applied to the skybox image. After applying …\nDepth of field, a postprocessing effect that simulates …\nExperimental features that are not yet finished. Please …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-object, per-pixel motion blur.\nRun a prepass before the main pass to generate depth, …\nSubpixel morphological antialiasing (SMAA).\nAn auto exposure compensation curve. This curve is used to …\nVarious errors that can occur when constructing an …\nPlugin for the auto exposure feature.\nComponent that enables auto exposure for an HDR-enabled 2d …\nA discontinuity was found in the curve.\nThe curve is not monotonically increasing on the x-axis.\nExposure compensation curve to apply after metering. The …\nThe distance in F-stops from the target exposure from …\nThe portion of the histogram to consider when metering.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild an <code>AutoExposureCompensationCurve</code> from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe mask to apply when metering. The mask will cover the …\nThe range of exposure values for the histogram.\nThe speed at which the exposure adapts from dark to bright …\nThe speed at which the exposure adapts from bright to dark …\nAdds support for specialized “blit pipelines”, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a threshold filter to the input image to extract …\nApplies a bloom effect to an HDR-enabled 2d or 3d camera.\nThe default bloom preset.\nA preset that’s similar to how older games did bloom.\nA preset that applies a very strong bloom, and blurs the …\nControls whether bloom textures are blended between or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTightens how much the light scatters (default: 1.0).\nControls the baseline of how much the image is scattered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost curve. Controls the …\nBaseline of the quadratic threshold curve (default: 0.0).\nControls how much to blend between the thresholded and …\nAdds Support for Contrast Adaptive Sharpening (CAS).\nApplies a contrast adaptive sharpening (CAS) filter to the …\nWhether to try and avoid sharpening areas that are already …\nEnable or disable sharpening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdjusts sharpening strength. Higher values increase the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an orthographic projection camera with a custom <code>Z</code> …\nNote: default value for <code>OrthographicProjection.near</code> is <code>0.0</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the “main 3d render graph”. The …\nThe camera coordinate space is right-handed x-right, y-up, …\nThe depth clear operation to perform for the main 3d pass.\nClear with a specified value. Note that 0.0 is the far …\nTrue if multisampled depth textures are supported on this …\nBetter quality. Suitable for high end GPUs. (e.g. Desktop)\nLoad from memory.\nBest performance at the cost of quality. Suitable for …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque3d</code> […\nA <code>bevy_render::render_graph::Node</code> that runs the …\nA balanced option between quality and performance.\nOpaque 3D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nThe quality of the screen space transmission blur effect, …\nThe highest quality, suitable for non-realtime rendering. …\nThe asset that this phase item is associated with.\nThe ranges of instances.\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nThe function used to draw.\nAn extra index, which is either a dynamic offset or an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key, which determines which can be batched.\nThe lightmap, if present.\nThe ID of a bind group specific to the material.\nThe identifier of the render pipeline.\nAn entity from which data will be fetched, including the …\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D Deferred pass.\nOpaque phase of the 3D Deferred pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender node used by the prepass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe extra texture used as the second render target for the …\nA more accurate simulation, in which circles of confusion …\nThe bind group shared among all invocations of the depth …\nThe layout for the bind group shared among all invocations …\nControls the appearance of the effect.\nThe node in the render graph for depth of field.\nInformation needed to specialize the pipeline …\nA key that uniquely identifies depth of field pipelines.\nA plugin that adds support for the depth of field effect …\nDepth of field settings.\nData about the depth of field effect that’s uploaded to …\nA faster simulation, in which out-of-focus areas are …\nBind group layouts for depth of field specific to a single …\nAlong with the focal length, controls how much objects not …\nGiven the sensor height and the FOV, returns the focal …\nConfigures depth textures so that the depth of field …\nThe distance in meters to the location in focus.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes <code>DepthOfFieldSettings</code> from a set of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum diameter, in pixels, that we allow a circle of …\nObjects are never considered to be farther away than this …\nThe appearance of the effect.\nCreates the second render target texture that the first …\nCreates depth of field bind group 1, which is shared among …\nSpecializes the depth of field pipelines specific to a …\nCreates the bind group layouts for the depth of field …\nThe height of the image sensor format in meters.\nBundle to apply temporal anti-aliasing.\nRender <code>bevy_render::render_graph::Node</code> used by temporal …\nPlugin for temporal anti-aliasing. Disables multisample …\nComponent to apply temporal anti-aliasing to a 3D …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true to delete the saved temporal history (past …\nuses the <code>FULLSCREEN_SHADER_HANDLE</code> to output a\nAdds support for Fast Approximate Anti-Aliasing (FXAA)\nUse lower sensitivity for a sharper, faster, result. Use …\nTrims the algorithm from processing darks.\nEnable render passes for FXAA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA component that enables and configures motion blur when …\nAdds <code>MotionBlur</code> and the required depth and motion vector …\nAdds support for per-object motion blur to the app. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe quality of motion blur, corresponding to the number of …\nThe strength of motion blur from <code>0.0</code> to <code>1.0</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis enables “msaa writeback” support for the <code>core_2d</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D prepass.\nIf added to a <code>crate::prelude::Camera3d</code> then deferred …\nIf added to a <code>crate::prelude::Camera3d</code> then depth values …\nIf added to a <code>crate::prelude::Camera3d</code> then screen space …\nIf added to a <code>crate::prelude::Camera3d</code> then vertex world …\nOpaque phase of the 3D prepass.\nThe data used to bin each opaque 3D object in the prepass …\nTextures that are written to by the prepass.\nThe ID of the asset.\nThe deferred gbuffer generated by the deferred pass. …\nA texture that specifies the deferred lighting pass id for …\nThe depth texture generated by the prepass. Exists only if …\nThe function used to draw the mesh.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation that separates items into bins.\nThe ID of a bind group specific to the material.\nThe motion vectors texture generated by the prepass. …\nThe normals texture generated by the prepass. Exists only …\nThe ID of the GPU pipeline.\nAn entity from which Bevy fetches data common to all …\nThe size of the textures.\nRender node used by the prepass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSixteen search steps, 8 diagonal search steps, and corner …\nFour search steps; no diagonal or corner detection.\nEight search steps; no diagonal or corner detection.\nA render world component that stores the bind groups …\nValues supplied to the GPU for SMAA.\nThe GPU buffer that holds all <code>SmaaInfoUniform</code>s for all …\nA render world component that stores the offset of each …\nA unique identifier for a set of SMAA pipelines.\nThe render graph node that performs subpixel morphological …\nA render world resource that holds all render pipeline …\nAdds support for subpixel morphological antialiasing, or …\nA preset quality level for SMAA.\nAdd this component to a <code>bevy_render::camera::Camera</code> to …\nStores the specialized render pipelines for SMAA.\nA render world component that holds the intermediate …\nThirty-two search steps, 8 diagonal search steps, and …\nA render world component that holds the pipeline IDs for …\nA four-channel RGBA texture that stores the output from …\nThe bind group for the second pass (blending weight …\nThe bind group for the first pass (edge detection).\nThe two-channel texture that stores the output from the …\nThe 8-bit stencil texture that records which pixels the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe bind group for the final pass (neighborhood blending).\nA predefined set of SMAA parameters: i.e. a quality level.\nInformation about the width and height of the framebuffer.\nSame base implementation that Godot 4.0 uses for Tonemap …\nBy Troy Sobotka https://github.com/sobotka/AgX Very …\nDefault Filmic Display Transform from blender. Somewhat …\nEnables a debanding shader that applies dithering to …\nThe hue needs to be changed.\nBypass tonemapping.\nSuffers from lots hue shifting, brights don’t desaturate …\nSuffers from hue shifting. Brights don’t desaturate much …\nSaturation/contrast/gamma/gain/lift for one or more …\nBy Tomasz Stachowiak Has little hue shifting in the darks …\nOptionally enables a tonemapping shader that attempts to …\n3D LUT (look up table) textures used for tonemapping\nVarious flags describing what tonemapping needs to do.\nCurrent Bevy default. By Tomasz Stachowiak …\nThe white balance needs to be adjusted.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")