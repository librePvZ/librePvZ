searchState.loadedDescShard("rectangle_pack", 0, "<code>rectangle-pack</code> is a library focused on laying out any …\nA rectangular section within a target bin that takes up …\nIncoming boxes are places into the smallest hole that will …\nGiven two sets of containers, which of these is the more …\nGroups of rectangles that need to be placed into bins.\nThe rectangles can’t be placed into the bins. More bin …\nDescribes how and where an incoming rectangle was packed …\nA rectangle that we want to insert into a target bin\nAn error while attempting to pack rectangles into bins.\nInformation about successfully packed rectangles.\nA bin that we’d like to play our incoming rectangles into\nWhen a section is filled it gets split into three new …\nThe free <code>BinSection</code>s within the <code>TargetBin</code> that rectangles …\nOver time as you use <code>TargetBin.push_available_bin_section</code> …\nSelect the container that has the smallest box.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new BinSection\nCreate a new <code>LayeredRectGroups</code>\nWhether or not two bin sections overlap each other.\nDetermine how to fit a set of incoming rectangles (2d or …\nIndicates where every incoming rectangle was placed\nPush a <code>BinSection</code> to the list of remaining <code>BinSection</code>’s …\nPush a <code>BinSection</code> to the list of remaining <code>BinSection</code>’s …\nPush one or more rectangles\nRemove the section that was just split by a placed …\nSee if a <code>LayeredRect</code> can fit inside of this BinSection.\nThe volume of the box")