searchState.loadedDescShard("gpu_alloc", 0, "Implementation agnostic memory allocator for Vulkan like …\nEnumeration of possible errors that may occur during …\nAllocation flags\nMapping failed due to block being already mapped.\nConfiguration for <code>GpuAllocator</code>\nSpecifies that the memory can be used for buffers created …\nRequests memory that can be addressed with <code>u64</code>. Allows …\nThis flag is set for device-local memory types. …\nHints allocator that memory will be used for data …\nHints for allocator to decide on allocation strategy.\nMemory mapped error.\nProperties of the device that will be used for allocating …\nHints for allocator to find memory with faster device …\nMemory allocator for Vulkan-like APIs.\nMemory will be accessed from host. This flags guarantees …\nThis flag is set for host-cached memory types. Host-cached …\nThis flag is set for host-coherent memory types. …\nThis flag is set for host-visible memory types. …\nThis flag is set for lazily-allocated memory types. …\nEnumeration of possible errors that may occur during …\nMap failed due to implementation specific error.\nMap failed for implementation specific reason. For Vulkan …\nSpecifies range of the mapped memory region.\nMemory block allocated by <code>GpuAllocator</code>.\nAbstract device that can be used to allocate memory …\nDefines memory heap.\nMemory properties type.\nDefines memory type.\nAllocation request cannot be fulfilled as no available …\nAttempt to map memory block with non-host-visible memory …\nDevice memory exhausted.\nDevice memory exhausted.\nBackend reported that device memory has been exhausted. …\nBackend reported that device memory has been exhausted. …\nHost memory exhausted.\nHost memory exhausted.\nBackend reported that host memory has been exhausted. …\nBackend reported that host memory has been exhausted. …\nMemory exhausted error.\nThis flag is set for protected memory types. Protected …\nHint for allocator that dedicated memory object is …\nMemory request for allocator.\nAllocation directly from device. Very slow. Count of …\nHints allocator that memory will be used for short duration\nReached limit on allocated memory objects count. …\nHints allocator that memory will be used for data …\nMemory usage type. Bits set define intended usage for …\nMinimal alignment mask required. Returned block may have …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAllocates memory block from specified <code>device</code> according to …\nAllocates memory block from specified <code>device</code> according to …\nAllocates new memory object from device. This function may …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSpecifies if feature required to fetch device address is …\nDeallocates leftover memory objects. Should be used before …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDeallocates memory block previously allocated from this …\nDeallocate memory object.\nSize in bytes of request that will be served by dedicated …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nUpper limit for size in bytes of chunks in free-list …\nFlushes ranges of memory mapped regions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nHeap index of the memory type.\nReturns default configuration for average sized potato.\nReturns default configuration.\nCreates a memory block from an existing memory allocation, …\nInitial memory object size for buddy allocator. If less …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates ranges of memory mapped regions.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns pointer to mapped memory range of this block. This …\nMap region of device memory to host memory space.\nReturns the maximum allocation size supported.\nMaximum number of valid memory allocations that can exist …\nMaximum size for single allocation supported by the device.\nReturns reference to parent memory object.\nMemory object reference.\nArray of memory heaps provided by the device.\nReturns index of type of parent memory object.\nArray of memory types provided by the device.\nBitset for memory types. Returned block will be from …\nMinimal size for buddy allocator.\nCreates  new instance of <code>GpuAllocator</code>. Provided …\nAtom size for host mappable non-coherent memory.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns offset in bytes from start of memory object to …\nOffset in bytes from start of the memory object.\nSize in bytes of request that will be served by dedicated …\nReturns memory property flags for parent memory object.\nProperty flags of the memory type.\nTransiently maps block memory range and copies specified …\nReturns the number of remaining available allocations.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the number of remaining available allocations.\nReturns size of this memory block.\nSize in bytes of the memory range.\nSize of memory heap in bytes.\nMinimal size of memory block required. Returned block may …\nSize in bytes of first chunk in free-list allocator.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSize in bytes of transient memory request that will be …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmaps memory range of this block that was previously …\nUnmap previously mapped memory region.\nIntended memory usage. Returned block may support …\nTransiently maps block memory range and copies specified …")