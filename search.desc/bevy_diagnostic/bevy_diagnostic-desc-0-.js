searchState.loadedDescShard("bevy_diagnostic", 0, "This crate provides a straightforward solution for …\nTotal system cpu usage in %\nDefault max history length for new diagnostics.\nA timeline of <code>DiagnosticMeasurement</code>s of a specific type. …\nA single measurement of a <code>Diagnostic</code>.\nUnique diagnostic path, separated by <code>/</code>.\nRecord new <code>DiagnosticMeasurement</code>’s.\nAdds core diagnostics resources to an App.\nA collection of <code>Diagnostic</code>s.\nAdds “entity count” diagnostic to an App.\nAdds “frame time” diagnostic to an App, specifically …\nAn App Plugin that logs diagnostics to the console.\nTotal system memory usage in %\nExtend <code>App</code> with new <code>register_diagnostic</code> function.\nA resource that stores diagnostic information about the …\nAdds a System Information Diagnostic, specifically …\nAdd a new <code>Diagnostic</code>.\nAdd a new value as a <code>DiagnosticMeasurement</code>.\nAdd a measurement to an enabled <code>Diagnostic</code>. The …\nReturns full path, joined by <code>/</code>\nReturn the simple moving average of this diagnostic’s …\nClear the history of this diagnostic.\nReturns an iterator over path components.\nCreate a new <code>DiagnosticPath</code>. Usable in const contexts.\nReturn the duration between the oldest and most recent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>DiagnosticPath</code> from an iterator over …\nReturn the maximum number of elements for this diagnostic.\nGet the latest <code>DiagnosticMeasurement</code> from an enabled …\nReturn the number of elements for this diagnostic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all <code>Diagnostic</code>s.\nReturn an iterator over all <code>Diagnostic</code>s, by mutable …\nGet the latest measurement from this diagnostic.\nCreate a new <code>DiagnosticPath</code> from the specified string.\nCreate a new diagnostic with the given path.\nRegister a new <code>Diagnostic</code> with an <code>App</code>.\nReturn the exponential moving average of this diagnostic.\nGet the latest value from this diagnostic.\nSet the maximum history length.\nThe smoothing factor used for the exponential smoothing …\nAdd a suffix to use when logging the value, can be used to …")