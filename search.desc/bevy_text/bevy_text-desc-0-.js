searchState.loadedDescShard("bevy_text", 0, "Lines will be broken without discrimination on any …\nDetermines how lines will be broken when preventing text …\nLeftmost &amp; rightmost characters are equidistant to the …\nAn <code>InvalidFont</code> Error\nPossible errors that can be produced by <code>FontLoader</code>\nAn IO Error\nDescribes the horizontal alignment of multiple lines of …\nLeftmost character is immediately to the right of the …\nNo soft wrapping, where text is automatically broken up …\nRightmost character is immediately to the left of the …\nThe maximum width and height of text. The text will wrap …\nThe bundle of components needed to draw text in a 2D scene …\nRender information for a corresponding <code>Text</code> component.\nAdds text rendering support to an app.\nSettings used to configure the <code>TextPlugin</code>.\nUnbounded text will not be truncated or wrapped.\nA convenient alias for <code>With&lt;Text&gt;</code>, for use with …\nUses the Unicode Line Breaking Algorithm. Lines will be …\nText is rendered for two different view projections, a …\nAllows font size to be set dynamically exceeding the …\nSystem calculating and inserting an <code>Aabb</code> component to …\nThis system extracts the sprites from the 2D text …\nIf this is not specified, then\nThe vertical height of rasterized glyphs in the font atlas …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Text</code> with a single section.\nConstructs a <code>Text</code> from a list of sections.\nCreate an empty <code>TextSection</code> from a style. Useful when the …\nThe global transform of the text.\nInherited visibility of an entity.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the font atlas set contains no elements\nThe text’s internal alignment. Should not affect its …\nReturns the number of font atlases in this set\nHow the text should linebreak when running out of the …\nProcesses the asset in an asynchronous closure.\nCreate a new <code>TextSection</code>.\nScales <code>value</code> by <code>factor</code>.\nThe maximum width and height of text in logical pixels.\nSoft maximum number of font atlases supported in a …\nMarks that this is a <code>SpriteSource</code>.\nContains the text.\nThe maximum width and height of the text.\nHow the text is positioned relative to its transform.\nContains the size of the text and its glyph’s position …\nThe transform of the text.\nUpdates the layout and size information whenever the text …\nAlgorithmically-computed indication of whether an entity …\nThe visibility properties of the text.\nReturns this <code>Text</code> with a new <code>JustifyText</code>.\nReturns this <code>Text</code> with soft wrapping disabled. Hard …")