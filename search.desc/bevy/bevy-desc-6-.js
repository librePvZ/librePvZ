searchState.loadedDescShard("bevy", 6, "A builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait for required for implementing <code>Meshable</code> for …\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nFailed to generate tangents for the mesh.\nThe index/vertex buffer info of a <code>GpuMesh</code>.\nThe GPU-representation of a <code>Mesh</code>. Consists of a vertex …\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nAn array of indices into the <code>VertexAttributeValues</code> for a …\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nTreats the shape as a mask over a circle of equal size and …\nA 3D object made out of vertices representing triangles, …\nA trait used to build <code>Mesh</code>es from a configuration\nAdds the <code>Mesh</code> as an asset and makes sure that they are …\nDescribes the layout of the mesh vertices in GPU memory.\nStores the single copy of each mesh vertex buffer layout.\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nVertex data is a list of points. Each vertex is a new …\nPrimitive type the input mesh is composed of.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nContains an array where each entry describes a property of …\nGet a flags value with all known bits set.\nSets a custom anchor point for the mesh\nSets a custom anchor point for the mesh\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nSets a custom angle range in radians instead of a full …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nReturns the values as float triples if possible.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> according to the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe <code>Cone</code> shape.\nWhether all set bits in a source flags value are also set …\nThe <code>Cylinder</code> shape.\nThe intersection of a source flags value with the …\nThe <code>Ellipse</code> shape.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe format of the vertex attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a new <code>PlaneMeshBuilder</code> from the given length, with …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>PlaneMeshBuilder</code> from the given size, with …\nThe <code>ConicalFrustum</code> shape.\nFlattens the <code>VertexAttributeValues</code> into a sequence of …\nCreates an icosphere mesh with the given number of …\nThe <em>unique</em> id of the vertex attribute. This will also …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts a new mesh vertex buffer layout in the store and …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if there are no vertices in this …\nReturns <code>true</code> if there are no indices.\nWhether all bits in this flags value are unset.\nReturns an iterator over the indices.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSets the <code>SphereKind</code> that will be used for building the …\nThe type of sphere mesh that will be built.\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the hemispheres …\nReturns the number of vertices in this …\nReturns the number of indices.\nSets the number of vertical lines subdividing the …\nThe number of vertical lines subdividing the hemispheres …\nSets the number of segments used for the main ring of the …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nSets the number of vertices used for each circular segment …\nThe number of vertices used for each circular segment in …\nThe friendly name of the vertex attribute\nCreate an <code>AnnulusMeshBuilder</code> with the given inner radius, …\nCreate a new <code>ExtrusionBuilder&lt;P&gt;</code> from a given <code>base_shape</code> …\nCreates a new <code>CircleMeshBuilder</code> from a given radius and …\nCreates a new <code>CircularSectorMeshBuilder</code> from a given sector\nCreates a new <code>CircularSegmentMeshBuilder</code> from a given …\nCreates a new <code>EllipseMeshBuilder</code> from a given half width …\nCreates a new <code>Capsule2dMeshBuilder</code> from a given radius, …\nCreates a new <code>Capsule3dMeshBuilder</code> from a given radius, …\nCreates a new <code>ConeMeshBuilder</code> from a given radius, height, …\nCreates a new <code>ConicalFrustumMeshBuilder</code> from the given top …\nCreates a new <code>CylinderMeshBuilder</code> from the given radius, a …\nCreates a new <code>PlaneMeshBuilder</code> from a given normal and …\nCreates a new <code>SphereMeshBuilder</code> from a radius and …\nCreates a new <code>TorusMeshBuilder</code> from an inner and outer …\nSets the normal of the plane, aka the direction the plane …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nConverts the extracted mesh a into <code>GpuMesh</code>.\nMesh generation for primitive shapes.\nThe intersection of a source flags value with the …\nSets the number of vertices used in constructing the …\nSets the number of vertices used for each hemicircle at …\nSets the number of vertices used for the ellipse mesh at …\nSets the number of vertices used in constructing the …\nSets the number of vertices used for the circle mesh at …\nSets the number of vertices used for the circle mesh.\nSets the number of vertices used for the sector mesh.\nSets the number of vertices used for the segment mesh.\nSets the number of vertices used for the ellipse mesh.\nSets the number of vertices used for one hemicircle. The …\nSets the number of vertices used for the base of the cone.\nSets the number of vertices used for the top and bottom of …\nSets the number of vertices used for the top and bottom of …\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the cylindrical …\nThe sector shape.\nThe segment shape.\nSets the number of segments along the depth of the …\nSets the number of horizontal lines subdividing the …\nSets the number of segments along the height of the …\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the size of the plane mesh.\nThe <code>Sphere</code> shape.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSets the subdivisions of the plane mesh.\nThe number of subdivisions in the mesh.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe <code>Torus</code> shape.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates a UV sphere <code>Mesh</code> with the given number of …\nSets the uv mode used for the sector mesh\nSets the uv mode used for the segment mesh\nThe UV mapping mode\nThe UV mapping mode\nSets the manner in which UV coordinates are distributed …\nThe manner in which UV coordinates are distributed …\nContains all attribute data for each vertex.\nIgnore the cylinder caps, making the mesh a shallow tube …\nAngle by which to rotate the shape when generating the UV …\nContains all index data of a mesh.\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nHow many components <code>MorphAttributes</code> has.\nMax target count available for morph targets.\nControl a specific <code>Mesh</code> instance’s morph targets. These …\nAttributes <strong>differences</strong> used for morph targets.\nInherit weights from glTF mesh parent entity to direct …\nAn image formatted for use with <code>MorphWeights</code> for rendering …\nControls the morph targets for all child <code>Handle&lt;Mesh&gt;</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBevy meshes are gltf primitives, <code>MorphWeights</code> on the bevy …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate textures for each morph target.\nThe vertex normal difference between base mesh and this …\nThe vertex position difference between base mesh and this …\nThe vertex tangent difference between base mesh and this …\nA builder for creating a <code>Mesh</code> with an <code>Annulus</code> shape.\nUV space is distributed by how much of the capsule …\nThe center of the base circle\nThe center of the bottom circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Capsule2d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nSpecifies how to generate UV-mappings for the …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSector</code> …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSegment</code> …\nAnchoring options for <code>ConeMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cone</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>ConicalFrustum</code> …\nAnchoring options for <code>CylinderMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait for required for implementing <code>Meshable</code> for …\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nTreats the shape as a mask over a circle of equal size and …\nA trait used to build <code>Mesh</code>es from a configuration\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe <code>Cone</code> shape.\nThe <code>Cylinder</code> shape.\nThe <code>Ellipse</code> shape.\nThe <code>ConicalFrustum</code> shape.\nThe type of sphere mesh that will be built.\nThe number of horizontal lines subdividing the hemispheres …\nThe number of vertical lines subdividing the hemispheres …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nThe number of vertices used for each circular segment in …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nThe number of horizontal lines subdividing the cylindrical …\nThe sector shape.\nThe segment shape.\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nThe <code>Sphere</code> shape.\nThe number of subdivisions in the mesh.\nThe <code>Torus</code> shape.\nThe UV mapping mode\nThe UV mapping mode\nThe manner in which UV coordinates are distributed …\nAngle by which to rotate the shape when generating the UV …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>PipelinedRenderingPlugin</code> can be added to your …\nChannels used by the main app to send and receive the …\nA Label for the sub app that runs the parts of pipelined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>RenderAppChannels</code> from a <code>async_channel::Receiver</code> …\nReceive the <code>render_app</code> from the rendering thread. Return …\nSend the <code>render_app</code> to the rendering thread.\nPer vertex coloring. Use in conjunction with …\nPer vertex joint transform matrix index. Use in …\nPer vertex joint transform matrix weight. Use in …\nThe direction the vertex normal is facing in. Use in …\nWhere the vertex is located in space. Use in conjunction …\nThe direction of the vertex tangent. Used for normal …\nTexture coordinates for the vertex. Use in conjunction …\nAlternate texture coordinates for the vertex. Use in …\nCombines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nSpreads the fragment out over a hardware-dependent number …\nThe base color alpha value defines the opacity of the …\nThe defining <code>Component</code> for camera entities, storing …\nA <code>Resource</code> that stores the color that is used to clear the …\nFor a camera, specifies the color used to clear the …\nThe given clear color is used, overriding the <code>ClearColor</code> …\nThe clear color is taken from the world’s <code>ClearColor</code> …\nSchedule which extract data from the main world and …\nAn entity that is invisible in the hierarchy.\nAn entity that cannot be seen from any views.\nAn invisible <code>SpatialBundle</code>, with no translation, rotation, …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nA visible <code>SpatialBundle</code>, with no translation, rotation, …\nAdds the <code>Image</code> as an asset and makes sure that they are …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nErrors that occur while converting an <code>Image</code> into a …\nReduce transparency to fully opaque or fully transparent …\nA 3D object made out of vertices representing triangles, …\nA trait used to build <code>Mesh</code>es from a configuration\nA trait for shapes that can be turned into a <code>Mesh</code>.\nControls the morph targets for all child <code>Handle&lt;Mesh&gt;</code> …\nConfiguration resource for Multi-Sample Anti-Aliasing.\nCombines the color of the fragments with the colors behind …\nNo clear color is used: the camera will simply draw on top …\nBase color alpha values are overridden to be fully opaque …\nProject a 3D space onto a 2D surface using parallel lines, …\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA 3D camera projection in which distant objects appear …\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nA configurable <code>CameraProjection</code> that can select its …\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nA <code>Bundle</code> that allows the correct positional rendering of …\nEncountered an unknown error during conversion.\nConversion into dynamic image not supported for source …\nAn entity that is visible in the hierarchy.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nThe area that the projection covers relative to …\nReturns the aspect ratio (width / height) of a 2D image.\nThe aspect ratio (width divided by height) of the viewing …\nRetrieves the data currently set to the vertex attribute …\nRetrieves the data currently set to the vertex attribute …\nReturns an iterator that yields references to the data of …\nReturns an iterator that yields mutable references to the …\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nThe clear color operation to perform on the render target.\nThe projection matrix computed using this camera’s …\nCompute the Axis-Aligned Bounding Box of the mesh vertices …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh.\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh. If the …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of an indexed mesh, …\nComputed values for this camera, such as the projection …\nConvert a texture from a format to another. Only a few …\nCounts all vertices of the mesh.\ndefault is a 1x1x1 all ‘1.0’ texture\nCreates image settings with linear sampling by default.\nCreates image settings with nearest sampling by default.\nThe default image sampler to use when <code>ImageSampler</code> is set …\nDuplicates the vertex attributes so that no vertices are …\nThe distance from the camera in world units of the viewing …\nThe distance of the far clipping plane in world units.\nThe first child <code>Handle&lt;Mesh&gt;</code> primitive controlled by these …\nThe vertical field of view (FOV) in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts this sector into a <code>Mesh</code> using a default …\nConverts this sector into a <code>Mesh</code> using a default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a bytes buffer in a <code>Image</code>, according to type …\nConverts a <code>DynamicImage</code> to an <code>Image</code>.\nCreates a new <code>SpatialBundle</code> from a <code>Transform</code>.\nGenerate tangents for the mesh using the <code>mikktspace</code> …\nReturns <code>true</code> if the entity is visible in the hierarchy. …\nReturns <code>true</code> if the entity is visible in any view. …\nComputes and returns the index data of the mesh as bytes. …\nGet this <code>Mesh</code>’s <code>MeshVertexBufferLayout</code>, used in …\nComputes and returns the vertex data of the mesh as bytes. …\nReturns the size of a vertex in bytes.\nThe global transform of the entity.\nWhether this mesh has morph targets.\nIf this is set to <code>true</code>, the camera will use an …\nReturns the height of a 2D image.\nRetrieves the vertex <code>indices</code> of the mesh.\nRetrieves the vertex <code>indices</code> of the mesh mutably.\nThe inherited visibility of the entity.\nSets the data for a vertex attribute (position, normal, …\nSets the vertex indices of the mesh. They describe how …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is set to <code>true</code>, this camera will be rendered to …\nWhether the texture format is compressed or uncompressed\nThe full logical size of this camera’s <code>RenderTarget</code>, …\nThe rendered logical bounds <code>Rect</code> of the camera. If the …\nThe logical size of this camera’s viewport. If the …\nMerges the <code>Mesh</code> data of <code>other</code> with <code>self</code>. The attributes …\nCreates a <code>Mesh</code> for a shape.\nGets a list of all morph target names, if they exist.\nIf this is enabled, a previous camera exists that shares …\nGiven a position in Normalized Device Coordinates, use the …\nThe distance from the camera in world units of the viewing …\nThe distance of the near clipping plane in world units.\nConstruct a new mesh. You need to provide a …\nCreates a new image from raw binary data and the …\nCreates a new image from raw binary data and the …\nNormalize joint weights so they sum to 1.\nCameras with a higher order are rendered later, and thus …\nThe <code>CameraOutputMode</code> for this camera.\nThe full physical size of this camera’s <code>RenderTarget</code> (in …\nThe rendered physical bounds <code>URect</code> of the camera. If the …\nThe physical size of this camera’s viewport (in physical …\nReturns the topology of the mesh.\nChanges the <code>size</code>, asserting that the total number of data …\nTakes a 2D image containing vertically stacked images of …\nRemoves the data for a vertex attribute\nRemoves the vertex <code>indices</code> from the mesh and returns them.\nResizes the image to the new size, by removing information …\nRotates the vertex positions, normals, and tangents of the …\nRotates the vertex positions, normals, and tangents of the …\nThe <code>ImageSampler</code> to use during rendering.\nScales the projection.\nScales the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nHow the projection will scale to the viewport.\nSets the visibility to <code>true</code>. This should not be considered …\nSets the names of each morph target. This should …\nSet morph targets image for this mesh. This requires a “…\nReturns the size of a 2D image.\nReturns the size of a 2D image as f32.\nThe “target” that this camera will render to.\nConverts a physical size in this <code>Camera</code> to a logical size.\nThe transform of the entity.\nTransforms the vertex positions, normals, and tangents of …\nTransforms the vertex positions, normals, and tangents of …\nTranslates the vertex positions of the mesh in place by …\nTranslates the vertex positions of the mesh by the given …\nA transparent white 1x1x1 image.\nConvert a <code>Image</code> to a <code>DynamicImage</code>. Useful for editing image\nThe view visibility of the entity.\nIf set, this camera will render to the given <code>Viewport</code> …\nSpecifies the origin of the viewport as a normalized …\nReturns a ray originating from the camera, that passes …\nReturns a 2D world position computed from a position on …\nThe visibility of the entity.\nThe visibility of the entity.\nReturns the width of a 2D image.\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with no shared …\nConsumes the mesh and returns a mesh with tangents …\nConsumes the mesh and returns a mesh with data set for a …\nConsumes the mesh and returns a mesh with the given vertex …\nConsumes the mesh and returns a mesh with morph target …\nConsumes the mesh and returns a mesh with the given morph …\nConsumes the mesh and returns a mesh without the data for …\nConsumes the mesh and returns a mesh without the vertex …\nGiven a position in world space, use the camera’s …\nGiven a position in world space, use the camera to compute …\nAn axis-aligned bounding box, defined by:\nA region of 3D space defined by the intersection of 6 …\nA region of 3D space, specifically an open set whose …\nReturns the signed distance from the bisecting plane to …\nReturns a bounding box enclosing the specified set of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a frustum derived from <code>clip_from_world</code>.\nReturns a frustum derived from <code>clip_from_world</code>, but with a …\nChecks if an Oriented Bounding Box (obb) intersects the …\nChecks if a sphere intersects the frustum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>HalfSpace</code> from a 4D vector whose first 3 …\nReturns the unit normal vector of the bisecting plane that …\nReturns the bisecting plane’s unit normal vector and the …\nCalculate the relative radius of the AABB with respect to …\nTemporarily stores the extracted and removed assets of the …\nSpecifies all ECS data required by …\nAll assets that should be prepared next frame.\nDescribes how an asset gets extracted and prepared for …\nA resource that attempts to limit the amount of data …\nThis plugin extracts the changed assets from the “app …\nDefines where the asset will be used.\nStores all GPU representations (<code>RenderAsset</code>) of …\nThe representation of the asset in the “main world”.\nGet a flags value with all known bits set.\nWhether or not to unload the asset after extracting it to …\ncheck how many bytes are available since the last reset\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSize of the data the asset will upload to the gpu. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns the default render asset usage flags: …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>max_bytes</code>: the number of bytes to write per frame. this is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPrepares the <code>RenderAsset::SourceAsset</code> for the GPU by …\nThis system prepares all assets of the corresponding …\nThe intersection of a source flags value with the …\nReset the available bytes. Called once per frame by the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA GPU-accessible <code>Buffer</code>.\nA GPU-accessible <code>Buffer</code>.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn edge, which connects two <code>Nodes</code> in a <code>RenderGraph</code>.\nA collection of input and output <code>Edges</code> for a <code>Node</code>.\nA <code>Node</code> without any inputs, outputs and subgraphs, which …\nAn entity from the ECS.\nAn entity from the ECS.\nThe label for the input node of a graph. Used to connect …\nA <code>Node</code> which acts as an entry point for a <code>RenderGraph</code> with …\nA shorthand for <code>Interned&lt;dyn RenderLabel&gt;</code>.\nA shorthand for <code>Interned&lt;dyn RenderSubGraph&gt;</code>.\nA render node that can be added to a <code>RenderGraph</code>.\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a <code>Node</code>, with all data …\nThe render graph configures the modular and re-usable …\nAdds common <code>RenderGraph</code> operations to <code>SubApp</code> (and <code>App</code>).\nThe context with all graph information required to run a …\nA strongly-typed class of labels used to identify a <code>Node</code> …\nDerive macro generating an impl of the trait <code>RenderLabel</code>.\nA strongly-typed class of labels used to identify a […\nDerive macro generating an impl of the trait <code>RenderSubGraph</code>…\nA <code>RenderGraph</code> <code>Node</code> that runs the configured subgraph once. …\nA command that signals the graph runner to run the sub …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a slot, which specifies its …\nA collection of input or output <code>SlotInfos</code> for a <code>NodeState</code>.\nA <code>SlotLabel</code> is used to reference a slot by either its name …\nDescribes the render resources created (output) or used …\nA value passed between render <code>Nodes</code>. Corresponds to the …\nA <code>TextureView</code> describes a texture used in a pipeline.\nA <code>TextureView</code> describes a texture used in a pipeline.\nThis trait should be used instead of the <code>Node</code> trait when …\nThis <code>Node</code> can be used to run any <code>ViewNode</code>. It will take …\nThe query that will be used on the view entity. It is …\nAdds the <code>node</code> with the <code>label</code> to the graph. If the label is …\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdd <code>node_edge</code>s based on the order of the given <code>edges</code> array.\nAdd node edge to the specified graph\nAutomatically add the required node edges based on the …\nAdd a <code>Node</code> to the <code>RenderGraph</code>:\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nAdds the <code>sub_graph</code> with the <code>label</code> to the graph. If the …\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>RenderSubGraph</code>.\nClones this <code>RenderLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nFeeds this value into the given [<code>Hasher</code>].\nFinishes the context for this <code>Node</code> by returning the sub …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the input slot value referenced by the <code>label</code>.\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the input slot value referenced by the <code>label</code> as …\nReturns the id of the <code>input_node</code>.\nReturns the <code>NodeState</code> of the input node of this graph.\nRetrieves the input slot value referenced by the <code>label</code> as …\nSearches the <code>input_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the <code>Node</code> referenced by the <code>label</code>.\nRetrieves the <code>Node</code> referenced by the <code>label</code> mutably.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code>.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code> mutably.\nReturns the id of the <code>output_node</code>.\nSearches the <code>output_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the <code>SlotInfo</code> for the provided label.\nRetrieves the index (inside input or output slots) of the …\nRetrieves the <code>SlotInfo</code> for the provided label mutably.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nChecks whether the <code>edge</code> already exists in the graph.\nChecks whether the input edge already exists.\nChecks whether the output edge already exists.\nSpecifies the required input slots for this node. They …\nReturns all “input edges” (edges going “in”) for …\nReturns the <code>SlotInfos</code> of the inputs.\nReturns the <code>NodeState</code> of the input node of this graph.\nReturns the input slot values for the node.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if there are no slots.\nReturns an iterator over the slot infos.\nReturns an iterator over a tuple of the input edges and …\nReturns an iterator over a tuple of the output edges and …\nReturns an iterator over the <code>NodeStates</code>.\nReturns an iterator over the <code>NodeStates</code>, that allows …\nReturns an iterator over the sub graphs.\nReturns an iterator over the sub graphs, that allows …\nReturns this node’s label.\nReturns the count of slots.\nCreates a new render graph context for the <code>node</code>.\nCreates an <code>NodeState</code> without edges, but the <code>input_slots</code> …\nRetrieves the <code>Node</code>.\nRetrieves the <code>Node</code> mutably.\nSpecifies the produced output slots for this node. They …\nReturns all “output edges” (edges going “out”) for …\nReturns the <code>SlotInfos</code> of the outputs.\nRemoves the <code>node</code> with the <code>label</code> from the graph. If the …\nRemoves the <code>Edge::NodeEdge</code> from the graph. If either node …\nRemoves the <code>Edge::SlotEdge</code> from the graph. If any nodes or …\nRemoves the <code>sub_graph</code> with the <code>label</code> from the graph. If …\nRuns the graph node logic, issues draw calls, updates the …\nRuns the graph node logic, issues draw calls, updates the …\nQueues up a sub graph for execution after the node has …\nCreates an <code>GraphInputNode</code> with the specified slots if not …\nSets the output slot value referenced by the <code>label</code>.\nReturns the <code>SlotType</code> of this value.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nThe name of the type that implements <code>Node</code>.\nUpdates internal node state using the current render <code>World</code> …\nUpdates internal node state using the current render <code>World</code> …\nUpdates all nodes and sub graphs of the render graph. …\nVerifies that the edge existence is as expected and checks …\nValidates that each input slot corresponds to an input …\nValidates that each output slot corresponds to an output …\nWhether or not this <code>PhaseItem</code> should be subjected to …\nRegisters a <code>RenderCommand</code> as a <code>Draw</code> function. They are …\nThe item is a mesh that’s eligible for indirect …\nThe key used for binning <code>PhaseItem</code>s into bins. Order the …\nRepresents phase items that are placed into bins. The …\nA collection of all rendering instructions, that will be …\nInformation about a single batch of entities rendered …\nA convenient abstraction for adding all the systems …\nIdentifies the list within <code>BinnedRenderPhase</code> that a phase …\nA <code>PhaseItem</code> item, that automatically sets the appropriate …\nA draw function used to draw <code>PhaseItem</code>s.\nAn identifier for a <code>Draw</code> function stored in <code>DrawFunctions</code>.\nStores all draw functions for the <code>PhaseItem</code> type hidden …\nStores all <code>Draw</code> functions for the <code>PhaseItem</code> type.\nTo extract the flag from a packed <code>PhaseItemExtraIndex</code>, …\nThe flag that indicates that this index is an indirect …\nSpecifies the ECS data of the item entity required by …\nThe special value that indicates that no extra index is …\nThe item isn’t a mesh at all.\nTo extract the index from a packed <code>PhaseItemExtraIndex</code>, …\nSpecifies the general ECS data (e.g. resources) required …\nAn item (entity of the render world) which will be drawn …\nThe “extra index” associated with some <code>PhaseItem</code>s, …\n<code>RenderCommand</code>s are modular standardized pieces of render …\nThe result of a <code>RenderCommand</code>.\nWraps a <code>RenderCommand</code> into a state so that it can be used …\nA <code>RenderCommand</code> that sets the pipeline for the …\nThe type used for ordering the items. The smallest values …\nRepresents phase items that must be sorted. The <code>SortKey</code> …\nA collection of all items to be rendered that will be …\nA convenient abstraction for adding all the systems …\nA <code>RenderPass</code>, which tracks the current pipeline state to …\nThe item is a mesh that’s eligible for indirect …\nStores the rendering instructions for a single phase that …\nSpecifies the ECS data of the view entity required by …\nA distance calculator for the draw order of <code>PhaseItem</code>s.\nStores the rendering instructions for a single phase that …\nAdds the <code>Draw</code> function and maps it to its own type.\nBins a new entity.\nAdds a <code>PhaseItem</code> to this render phase.\nAdds the <code>RenderCommand</code> for the specified render phase to …\nAdds the <code>Draw</code> function and maps it to the type <code>T</code>\nIf this extra index describes a dynamic offset, returns …\nIf this extra index describes an indirect parameters …\nThe range of instances that the batch covers. After doing …\nReturns a pair of mutable references to both the batch …\nA list of <code>BinKey</code>s for batchable items.\nThe id of the render pipeline, cached in the <code>PipelineCache</code>…\nRemoves all <code>PhaseItem</code>s from this render phase.\nCalculates the distance, or view-space <code>Z</code> value, for the …\nCalculates the distance, or view-space <code>Z</code> value, for the …\nDraws a <code>PhaseItem</code> by issuing zero or more <code>draw</code> calls via …\nFetches the ECS parameters for the wrapped <code>RenderCommand</code> …\nDraws primitives from the active vertex buffer(s).\nSpecifies the <code>Draw</code> function used to render the item.\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nPacks a dynamic offset into this extra index.\nThe corresponding entity that will be drawn.\nReturns the <code>PhaseItemExtraIndex</code>.\nThe dynamic offset of the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a 3D rangefinder for a view matrix.\nRetrieves the id of the <code>Draw</code> function corresponding to …\nRetrieves the <code>Draw</code> function corresponding to the <code>id</code> …\nRetrieves the id of the <code>Draw</code> function corresponding to …\nPacks a indirect parameters index into this extra index.\nInsert a single debug marker.\nThe range of instance indices in this batch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe items within this <code>SortedRenderPhase</code>.\nAn <code>Iterator</code> through the associated <code>Entity</code> for each …\nReturns either a dynamic offset or …\nReturns either an indirect parameters index or …\nCreates the appropriate <code>BinnedRenderPhaseType</code> for a mesh, …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nCreates a new binned phase item from the key and …\nCreates a new <code>RenderCommandState</code> for the <code>RenderCommand</code>.\nTracks the supplied render pass.\nItems in the bin that aren’t meshes at all.\nEnd the current debug group.\nPrepares the draw function to be used. This is called once …\nPrepares all draw function. This is called once and only …\nPrepares the render command to be used. This is called …\nStart a new debug group.\nAccesses the draw functions in read mode.\nRenders a <code>PhaseItem</code> by recording commands (e.g. setting …\nEncodes the GPU commands needed to render all entities in …\nRenders all of its <code>PhaseItem</code>s using their corresponding …\nRenders all <code>PhaseItem</code>s in the provided <code>range</code> (based on …\nAn entity that’s <em>representative</em> of this batch.\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSet the rendering viewport to the given camera <code>Viewport</code>.\nSets the active index buffer.\nSet push constant data.\nSets the active <code>RenderPipeline</code>.\nSets the scissor region.\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nSet the rendering viewport.\nSorts all of its <code>PhaseItem</code>s.\nSorts a slice of phase items into render order. Generally …\nDetermines the order in which the items are drawn.\nThis system sorts the <code>PhaseItem</code>s of all <code>SortedRenderPhase</code>s …\nA list of <code>BinKey</code>s for unbatchable items.\nReturns the wgpu <code>RenderPass</code>.\nAccesses the draw functions in write mode.\nEnable writes to all channels.\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nA ray-tracing acceleration structure binding.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nConverts a value to a <code>BindGroup</code> with a given …\nAn error that occurs during <code>AsBindGroup::as_bind_group</code> …\nConverts a value to a <code>ShaderType</code> for use in a bind group. …\nblock compressed texture. 16 bytes per block.\nEnable blue channel writes\nBack face\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBind groups are responsible for binding render resources …\nDescribes a group of bindings and the resources to be …\nHelper for constructing bindgroups.\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nHelper for constructing bind group layouts.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nDescribes a Buffer when allocating.\nIntegral type used for buffer slice sizes.\nDifferent ways that you can use a buffer.\nLike <code>RawBufferVec</code>, but doesn’t require that the data …\nEnable red, green, and blue channel writes\nBinding is visible from the compute shader of a compute …\nBuffer to buffer copy as well as buffer clear offsets and …\nAllow a buffer to be the destination buffer for a […\nAllows a texture to be the destination in a  […\nAllow a buffer to be the source buffer for a […\nAllows a texture to be the source in a […\nIndex of a cached compute pipeline in a <code>PipelineCache</code>.\nState of a cached pipeline inserted into a <code>PipelineCache</code>.\nIndex of a cached render pipeline in a <code>PipelineCache</code>.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nA <code>ComputePipeline</code> represents a compute pipeline and its …\nDescribes a compute pipeline.\nConstant\nThe pipeline GPU object is being created.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nData that will be stored alongside the “prepared” bind …\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nUse the “default” shader for the current context.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nDiscards the resulting value of the render pass for this …\nArgument buffer layout for draw_indexed_indirect commands.\nArgument buffer layout for draw_indirect commands.\nD.component\nD.alpha\nStores data to be transferred to the GPU and made …\nStores data to be transferred to the GPU and made …\nA writer that can be used to directly write elements into …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nFunction passes if new value is equal to existing value. …\nAn error occurred while trying to create the pipeline GPU …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nBinding is visible from the fragment shader of a render …\nFace of a vertex.\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment process in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nEnable green channel writes\nStores an array of elements to be transferred to the GPU …\nAn index into a <code>GpuArrayBuffer</code> for a given element.\nTrait for types able to go in a <code>GpuArrayBuffer</code>.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nA handle to a shader stored in the <code>Assets&lt;Shader&gt;</code> resource\nIgnore the stencil state for the face.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nAn invalid cached render pipeline index, often used to …\nAn invalid cached compute pipeline index, often used to …\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nSubresource range within an image\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nVertex data is advanced every instance.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nThe texture is laid out densely in memory as:\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nPassed to <code>Device::poll</code> to control how and if it should …\nType of buffer mapping.\nmax(Src, Dst)\nmin(Src, Dst)\nThe texture is laid out densely in memory as:\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nBinding is not visible from any shader stage.\nYUV 4:2:0 chroma subsampled format.\nNaga module.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nThe pipeline GPU object was created successfully and is …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nPair of load and store operations for an attachment aspect.\nOrigin of a copy to/from a texture.\nAn owned binding resource of any type (ex: a <code>Buffer</code>, …\nBlend mode that does standard alpha blending with …\nAn asset path leading to a shader\nA pipeline defining the data layout and shader logic for a …\nCache for render and compute pipelines.\nType of error returned by a <code>PipelineCache</code> when the …\nAdvanced options for use when a pipeline is compiled\nA descriptor for a <code>Pipeline</code>.\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nA prepared bind group returned as a result of …\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nThe pipeline GPU object is queued for creation.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nA structure for storing raw bytes that have already been …\nDescribes a compute pipeline.\nDescribes the fragment processing in a render pipeline.\nDescribes a render (graphics) pipeline.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex processing in a render pipeline.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nA <code>RenderPipeline</code> represents a graphics pipeline and its …\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nThe bind group could not be generated. Try again next …\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nA Sampler defines how a pipeline will sample from a …\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nDescribes a <code>Sampler</code>.\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nA reference to a shader asset.\nTrait implemented for all WGSL fixed-footprint types\nSource of a shader module.\nStage of the programmable pipeline.\nDescribes the shader stages that a binding will be visible …\nBase trait for all WGSL host-shareable types\nSampling returns signed integers.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nStores data to be transferred to the GPU and made …\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nSrc - Dst\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nA GPU-accessible texture.\nA texture binding.\nKind of data the texture holds.\nOrder in which TextureData is laid out in memory.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nDescribes a <code>Texture</code> with its associated metadata required …\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nA buffer for uniform values.\nStores data to be transferred to the GPU and made …\nLike a <code>BufferVec</code>, but only reserves space on the GPU for …\nThree unsigned 10-bit integers and one 2-bit integer, …\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\na map containing <code>OwnedBindingResource</code>s, keyed by the …\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nBinding is visible from the vertex and fragment shaders of …\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nWhether a vertex buffer is indexed by vertex or by …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nInformation about an adapter.\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nWGSL module as a string slice.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\n0.0\nSet stencil value to zero.\nReserves space for one more element in the buffer and …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAlpha equation.\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nThe stride, in bytes, between elements of this buffer.\nCreates a bind group for <code>self</code> matching the layout defined …\nReturn the <code>T</code> <code>ShaderType</code> for <code>self</code>. When used in <code>AsBindGroup</code> …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the inner hal CommandEncoder using a callback. The …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nAsserts that <code>Self</code> meets the requirements of the uniform …\nThe list of attributes which comprise a single vertex.\nThe list of attributes which comprise a single vertex.\nBack face mode.\nBackend used for device\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe value added to the vertex index before indexing into …\nBegins recording of a compute pass.\nStart a pipeline statistics query on this compute pass. It …\nBegins recording of a render pass.\nDepth bias state.\nCreates the bind group layout matching all bind groups …\nReturns a vec of bind group layout entries\nBind groups that this pipeline uses. The first entry will …\nReturns the binding for the buffer if the data has been …\nReturns the binding for the buffer if the data has been …\nReturns the binding for the buffer if the data has been …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nWait for a render pipeline to finish compiling.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is …\nReturns a handle to the buffer, if the data has been …\nReturns a handle to the buffer, if the data has been …\nReturns the buffer, if allocated.\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nThe format of any vertex buffers used with this pipeline.\nThe format of any vertex buffers used with this pipeline.\nBytes per “row” in an image.\nReturns the amount of space that the GPU will use before …\nReturns the amount of space that the GPU will use before …\nDepth bias clamp value (absolute).\nRemoves all elements from the buffer.\nRemoves all elements from the buffer.\nRemoves all elements from the buffer.\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nGet the texture dimension required of this texture view …\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nContents of a buffer on creation.\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nCreates a view of this texture.\nThe face culling mode.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nThe depth of the extent or the number of array layers\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nThe dynamic offset to use when setting the bind group in a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnd the pipeline statistics query on this compute pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is preformed when stencil test fails.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nFormat of the texture.\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the texture view. Either must be the same as the …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nThe compiled fragment stage, its entry point, and the …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates a new densely packed <code>VertexBufferLayout</code> from an …\nFront face mode.\nThe face to consider the front for the purpose of culling …\nTry to retrieve a compute pipeline GPU object from a …\nGet the compute pipeline descriptor a cached render …\nGet the state of a cached compute pipeline.\nReturns the label\nReturns the label\nTry to retrieve a render pipeline GPU object from a cached …\nGet the render pipeline descriptor a cached render …\nGet the state of a cached render pipeline.\nCreates a writer that can be used to directly write …\nReturns a globally-unique identifier for this <code>ShaderModule</code>.\nReturns a globally-unique identifier for this …\nReturns the format features guaranteed by the WebGPU spec.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nHeight of the extent\nReturns the <code>BindGroupId</code>.\nReturns the <code>ComputePipelineId</code>.\nReturns the <code>TextureId</code>.\nReturns the <code>TextureViewId</code>.\nReturns the <code>SamplerId</code>.\nThe index to use in a shader into the array.\nThe number of indices to draw.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nThe number of instances to draw.\nThe number of instances to draw.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the buffer is empty.\nWhether all bits in this flags value are unset.\nReturns true if the buffer is empty.\nReturns true if no elements have been added to this …\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nlabel\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of a buffer. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the bind group. This will show up in …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the bind group layout. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nThe layout of bind groups for this pipeline.\nReturns the number of items that have been pushed to this …\nReturns the number of items that have been pushed to this …\nReturns the length of the buffer.\nProcesses the asset in an asynchronous closure.\nHow data should be read through this attachment.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nHow to filter the texture when it needs to be minified …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nCreates a new <code>RawBufferVec</code> with the given <code>BufferUsages</code>.\nCreates a new <code>BufferVec</code> with the given <code>BufferUsages</code>.\nCreates a new <code>UninitBufferVec</code> with the given <code>BufferUsages</code>.\nCreate a new pipeline cache associated with the given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nBase offset of the buffer, in bytes.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns an iterator over the pipelines in the pipeline …\nReturns the number of planes a multi-planar format has.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nProcess the pipeline queue and create all pending …\nAdds a new value and returns its index.\nAdds a new value and returns its index.\nPush data into the <code>DynamicUniformBuffer</code>’s internal …\nSet of push constant ranges this pipeline uses. Each …\nThe push constant ranges for this pipeline. Supply an …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nInsert a compute pipeline into the cache, and queue its …\nInsert a render pipeline into the cache, and queue its …\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nMaterializes the buffer on the GPU with space for <code>capacity</code> …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\nSample count of texture. If this is not 1, texture must …\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the data the buffer stores.\nSets the active bind group for a given bind group index. …\nChanges the debugging label of the buffer.\nChanges the debugging label of the buffer.\nSets the active compute pipeline.\nSet push constant data for subsequent dispatch calls.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nLocation for this input. Must match the location in the …\nReturns the size of <code>Self</code> at runtime\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nReturns the size multiple requirement for a texture using …\nSlope depth biasing factor.\nSource code for the shader.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStencil state.\nWhat operations will be performed on the stencil part of …\nHow often this vertex buffer is “stepped” forward.\nHow often this vertex buffer is “stepped” forward.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds color space and premultiplied alpha information to …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nReduces the length of the buffer.\nReduces the length of the buffer.\nThe type of the binding\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a vec of (binding index, <code>OwnedBindingResource</code>). In …\nConvenience method to “unwrap” a pipeline state into …\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nUsages of a buffer. If the buffer is used in any way that …\nReturns true if the state relies on the constant color, …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nThe compiled vertex stage, its entry point, and the input …\nThe number of vertices to draw.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nCalculates the volume of the <code>Extent3d</code>.\nReturns a iterator of the IDs of all currently waiting …\nWidth of the extent\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMaterializes the buffer on the GPU, with an appropriate …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nY position of the origin\nZ position of the origin\nWhether workgroup scoped memory will be initialized with …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nHelper type meant to be used together with the <code>ShaderType</code> …\nTrait implemented for WGSL runtime-sized arrays and WGSL …\nDynamic storage buffer wrapper facilitating RW operations\nDynamic uniform buffer wrapper facilitating RW operations\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nTrait implemented for all WGSL fixed-footprint types\nBase trait for all WGSL host-shareable types\nStorage buffer wrapper facilitating RW operations\nUniform buffer wrapper facilitating RW operations\nAsserts that <code>Self</code> meets the requirements of the uniform …\nReturns the size of <code>Self</code> assuming the (contained) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nUsed to implement <code>ShaderType</code> for the given vector type\nUsed to implement <code>ShaderType</code> for the given wrapper type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing items necessary to implement <code>ShaderType</code> …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nCreates a new dynamic storage buffer wrapper with an …\nCreates a new dynamic uniform buffer wrapper with an …\nCreates a new dynamic storage buffer wrapper with a given …\nCreates a new dynamic uniform buffer wrapper with a given …\nModule containing items necessary to implement <code>ShaderType</code> …\nReturns the size of <code>Self</code> at runtime\nModule containing items necessary to implement <code>ShaderType</code> …\nHelper type for alignment calculations\nContains the error value\nContains the success value\nHelper type for size calculations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an alignment that is the smallest power of two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>n</code> is a multiple of this alignment\nReturns the max alignment from an array of alignments\nReturns the amount of padding needed so that <code>n + padding</code> …\nWill round up the given <code>n</code> so that the returned value will …\nWill round up the given <code>n</code> so that the returned value will …\nlength of the contained runtime sized array\nmax elements to read into the contained runtime sized array\nEnables writing to the matrix (via <code>&amp;mut [[T; R]; C]</code>)\nEnables reading from the matrix (via <code>&amp;[[T; R]; C]</code>)\nEnables the creation of a matrix (via <code>[[T; R]; C]</code>)\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nEnables writing to the vector (via <code>&amp;mut [T; N]</code>)\nEnables reading from the vector (via <code>&amp;[T; N]</code>)\nEnables the creation of a vector (via <code>[T; N]</code>)\nUsed to implement <code>ShaderType</code> for the given vector type\nThe handle to the physical device being used for rendering.\nThe <code>AdapterInfo</code> of the adapter in use by the renderer.\nThe context with all information required to interact with …\nThis GPU device is responsible for the creation of most …\nThe GPU instance is used to initialize the <code>RenderQueue</code> and …\nThis queue is used to enqueue tasks for the GPU to execute …\nA wrapper to safely make <code>wgpu</code> types Send / Sync on web …\nAppend a <code>CommandBuffer</code> to the command buffer queue.\nAppend a function that will generate a <code>CommandBuffer</code> to the\nCreates a new <code>TrackedRenderPass</code> for the context, …\nGets the current <code>CommandEncoder</code>.\nInitializes <code>Surface</code> for presentation.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> and initializes it with the specified …\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreates a <code>PipelineLayout</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a <code>ShaderModule</code> from either SPIR-V or WGSL source …\nCreates a new <code>Texture</code>.\nCreates a new <code>Texture</code> and initializes it with the …\nGets the diagnostics recorder, used to track elapsed time …\nList all <code>Features</code> that may be used with this device.\nFinalizes and returns the queue of <code>CommandBuffer</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the renderer by retrieving and preparing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all <code>Limits</code> that were requested of this device.\nCreates a new <code>RenderContext</code> from a <code>RenderDevice</code>.\nCheck for resource cleanups and mapping callbacks.\nGets the underlying <code>RenderDevice</code>.\nUpdates the <code>RenderGraph</code> with all of its nodes and then …\nReturns the wgpu <code>Device</code>.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nWhether wgpu should expose adapters that run on top of …\nLets the rendering plugin create resources itself.\nNo explicit minor version is requested, the driver …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nSupported when targeting the web through webassembly with …\nAllows the user to create arrays of buffers in shaders:\nRepresents the backends that wgpu will use.\nEnables clear to zero for textures.\nAllows the user to set a …\nWebGPU default features and limits\nGenerate debug information in shaders and objects.\nAllows for explicit creation of textures of format …\nBy default, polygon depth is clipped to 0-1 range …\nDon’t pass labels to wgpu-hal.\nAllows two outputs from a shader to be used for blending. …\nSupported on Windows 10 and later\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nAllows textures with formats “r32float”, “rg32float…\nThe maximum supported features and limits of the adapter …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nSelects which OpenGL ES 3 minor version to request.\nAdapter that has the highest performance. This is often a …\nAllows non-zero value for the <code>first_instance</code> member in …\nInstance debugging flags.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSupported on macOS/iOS\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nAllows renderer resource initialization to happen outside …\nPower usage is not considered when choosing an adapter.\nAllows the user to create bind groups containing arrays …\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nPower Preference when choosing a physical adapter.\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nAllows for usage of textures of format …\nAn enum describing how the renderer will initialize …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nAllows vertex shaders to have outputs which are not …\nEnables creating shader modules from SPIR-V binary data …\nAllows the user to create uniform arrays of storage …\nAllows compute and fragment shaders to use the subgroup …\nAllows shaders to use the subgroup barrier\nAllows vertex shaders to use the subgroup operation …\nEnables device specific texture format features.\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows shaders to index uniform buffer and storage texture …\nEnable validation, if possible.\nEnables using 64-bit types for vertex attributes.\nEnables bindings of writable storage buffers and textures …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nWebGPU default limits plus additional constraints in order …\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nProvides configuration for renderer initialization. Use …\nConfigures the priority used when automatically …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe constraints on limits allowed regardless of what the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nEnable recommended debugging and validation flags.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe features to ensure are disabled regardless of what the …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nThe shader compiler to use for the DX12 backend.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe features to ensure are enabled regardless of what the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nAllows you to choose which minor version of GLES3 to use …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThese are for controlling WGPU’s debug information to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe imposed limits.\nFunction to create a <code>RenderCreation::Manual</code> variant.\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…")