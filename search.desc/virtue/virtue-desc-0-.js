searchState.loadedDescShard("virtue", 0, "Virtue, a sinless derive macro helper\nA custom error thrown by the developer\nContains the error value\nErrors that can occur while parsing or generator your …\nExpected an ident at the given span.\nThe rust syntax is invalid. This can be returned while …\nContains the success value\nFailed to parse the code passed to …\nResult alias for virtue’s errors\nThe data type at <code>Span</code> is unknown. This will be called when …\nThrow a custom error\nThrow a custom error at a given location\nThrow a custom error at a given <code>Option&lt;TokenTree&gt;</code>\nThrow a custom error at a given token\nReturns the argument unchanged.\nCode to help generate functions.\nCalls <code>U::from(self)</code>.\nTurn this error into a <code>TokenStream</code> so it shows up as a …\nModule for parsing code. The main enum is <code>Parse</code>.\nUseful includes\nTurn this error into a <code>TokenStream</code> so it shows up as a …\nUtility functions\nReturn a new error that is located at the given span\nThe internal parse error\nThe error message\nThe expected rust syntax when this parsing occured\nThe span at which the invalid syntax is found\nAn optional span. Normally this is <code>None</code>, unless <code>.with_span</code> …\nOptionally the position that the error occurred at\nA builder for functions.\nThe <code>self</code> argument of a function\nA builder for constants.\nBuilder to generate a <code>struct &lt;Name&gt; { &lt;field&gt;: &lt;ty&gt;, ... }</code>\nBuilder for generating a module with its contents.\nThe generator is used to generate code.\nA helper struct for implementing functions for a given …\nA helper struct for implementing a trait for a given …\n<code>&amp;mut self</code>. The function will take self by mutable …\nNo <code>self</code> argument. The function will be a static function.\nHelper trait to make it possible to nest several builders. …\nFailed to parse the code passed to …\n<code>&amp;self</code>. The function will take self by reference.\nA helper struct build around a TokenStream to make it …\n<code>self</code>. The function will consume self.\nAdd a <em>private</em> field to the struct. For adding a public …\nAdd a <em>public</em> field to the struct. For adding a public …\nAdd a <code>use ...;</code> to the current mod\nAppend another StreamBuilder to the current StreamBuilder.\nMake the function async\nComplete the function definition. This function takes a …\nThe code that was being parsed\nThe parsing error\nExport the current stream to a file, making it very easy …\nAdd multiple <code>TokenTree</code> items to the stream.\nConsume the contents of this generator. This <em>must</em> be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a const to the trait implementation\nAdd a function to the trait implementation.\nAdd a function to the trait implementation.\nGenerate an <code>impl &lt;name&gt;</code> implementation. See <code>Impl</code> for more …\nGenerate an <code>impl &lt;name&gt;</code> implementation. See <code>Impl</code> for more …\nGenerate an <code>impl &lt;target_name&gt;</code> implementation. See <code>Impl</code> …\nGenerate a <code>mod &lt;name&gt; { ... }</code>. See <code>GenerateMod</code> for more …\nGenerate a struct with the given name.\nAdd a group. A group is any block surrounded by <code>{ .. }</code>, …\nPush a single ident to the stream. An ident is any word …\nPush a single ident to the stream. An ident is any word …\nGenerate an <code>impl &lt;name&gt;</code> implementation. See <code>Impl</code> for more …\nGenerate an <code>impl &lt;name&gt;</code> implementation. See <code>Impl</code> for more …\nGenerate an <code>impl &lt;target_name&gt;</code> implementation. See <code>Impl</code> …\nAdd an <code>impl &lt;name&gt; for &lt;struct&gt;</code>\nGenerate an <code>for &lt;trait_name&gt; for &lt;target_name&gt;</code> …\nGenerate an …\nAdd a type to the impl\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a lifetime to the stream.\nAdd a lifetime to the stream.\nAdd a literal string (<code>&amp;&#39;static str</code>) to the stream.\nAdd an <code>usize</code> value to the stream.\nMake the struct <code>pub</code>. By default the struct will have no …\nMake the function <code>pub</code>. If this is not called, the function …\nModify the generic constraints of a type. This can be used …\nModify the generic constraints of a type. This can be used …\nGenerate a new StreamBuilder\nAdd a single punctuation to the stream. Puncts are …\nAdd multiple punctuations to the stream. Multi punct …\nPush a single token to the stream.\nAttempt to parse the given string as valid Rust code, and …\nSet the given span on all tokens in the stream. This span …\nReturn the name for the struct or enum that this is going …\nAdd an argument with a <code>name</code> and a <code>ty</code>.\nAdd a generic parameter. Keep in mind that will <em>not</em> work …\nAdd a generic parameter. Keep in mind that will <em>not</em> work …\nAdd a lifetime parameter.\nAdd a lifetime parameter.\nSet the return type for the function. By default the …\nSet the value for <code>self</code>. See FnSelfArg for more information.\nComplete the constant definition. This function takes a …\nAn attribute for the given struct, enum, field, etc\nBring useful methods to access attributes of an element.\nThe location an attribute can be found at\nThe body of the enum or struct\nA const generic\na const generic parameter, e.g. …\nThe attribute is on a container, which will be either a …\nDefault visibility. Most items are private by default.\nThe given input is an enum\nThe body of an enum\nA variant of an enum\nThe attribute is on a field, which can either be a struct …\nThe different field types an enum variant can have.\nHelper trait for <code>AttributeAccess</code> methods.\nA single generic argument on a type\nA simple generic\nConstraints on generic types.\nA generic parameter for a struct or enum.\nThe variant is a named field\nReference to an enum variant’s field. Either by index or …\nThe variant is an unnamed field\na lifetime generic parameter, e.g. <code>struct Foo&lt;&#39;a&gt; { ... }</code>\nA lifetime generic\nParser for Enum and Struct derives.\nPublic visibility\na simple generic parameter, e.g. <code>struct Foo&lt;F&gt; { .. }</code>\nThe given input is a struct\nStruct-like variant\nThe body of a struct\nTuple-like variant\nAn unnamed field\nThe attribute is on an enum variant\nThe visibility of a struct, enum, field, etc\nReturns the attributes of this field.\nThe attributes of this variant\nThe attributes of the field\nClear the constraints\nAny constraints that this lifetime may have\nThe constraints of this generic, e.g. <code>F: SomeTrait</code>\nThe default value of this generic, e.g. <code>F = ()</code>\nReturn the delimiter of the group for this variant\nThe fields of this struct, <code>None</code> if this struct has no …\nThe field of the variant. See <code>Fields</code> for more info\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the first attribute that returns <code>Some(Self)</code>. See …\nCheck to see if has the given attribute. See <code>FromAttribute</code> …\nReturns <code>true</code> if any of the generics is a <code>Generic::Lifetime</code>\nThe ident of this lifetime\nThe ident of this generic\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit this struct or enum into a <code>Generator</code>, list of …\nReturns an iterator which contains only the const generics\nReturns an iterator which contains only the simple type …\nReturns an iterator which contains only the lifetimes\nThe location this attribute was parsed at\nThe name of this generic, e.g. <code>T</code>\nThe name of the variant\nReturns a list of names for the variant.\nParse the given <code>TokenStream</code> and return the result.\nTry to parse the given group into your own type. Return …\nThe punct token of the attribute. This will always be …\nPush the given constraint onto this stream.\nPush the given constraint onto this stream.\nReturn the span of <code>type</code>.\nReturn either the index or the ident of this field with a …\nConvert this ident into a TokenTree. If this is an <code>Index</code>, …\nThe group of tokens of the attribute. You can parse this …\nThe type of the field\nReturn <code>type</code> as a string. Useful for comparing it for known …\nGet the ident. Will panic if this is an <code>IdentOrIndex::Index</code>\nThe value of this variant. This can be one of:\nThe enum’s variants\nThe visibility of the field\nThe attributes of the field\nThe attributes of this field\nThe name of the field\nThe field index\nThe span of the field type\nThe attributes of the struct\nThe attributes of the enum\nThe body of the struct\nThe body of the enum\nThe generic constraits of the struct, e.g. …\nThe generic constraits of the enum, e.g. …\nThe generics of the struct, e.g. <code>struct Foo&lt;F&gt; { ... }</code> …\nThe generics of the enum, e.g. <code>enum Foo&lt;F&gt; { ... }</code> will be …\nThe name of the struct\nThe name of the enum\nThe visibility of the struct\nThe visibility of the enum\nA <code>Punct</code> token cannot join with the following token to form …\n<code>{ ... }</code>\n<code>[ ... ]</code>\nDescribes how a sequence of token trees is delimited.\nA structure representing a diagnostic message and …\nAn error.\nError returned from <code>TokenStream::expand_expr</code>.\nA delimited token stream.\nA token stream surrounded by bracket delimiters.\nA help message.\nAn identifier (<code>ident</code>).\nAn identifier.\nA <code>Punct</code> token can join with the following token to form a …\nAn enum representing a diagnostic level.\nError returned from <code>TokenStream::from_str</code>.\nA literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …\nA literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …\nTrait implemented by types that can be converted into a …\n<code>∅ ... ∅</code> An invisible delimiter, that may, for example, …\nA note.\n<code>( ... )</code>\nA <code>Punct</code> is a single punctuation character such as <code>+</code>, <code>-</code> or <code>#</code>…\nA single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).\nThe source file of a given <code>Span</code>.\nIndicates whether a <code>Punct</code> token can join with the …\nA region of source code, along with macro expansion …\nThe main type provided by this crate, representing an …\nA single token or a delimited sequence of token trees …\nA warning.\nReturns the value of this punctuation character as <code>char</code>.\nByte character literal.\nReturns the span’s byte position range in the source …\nByte string literal.\nC string literal.\nThe span of the invocation of the current procedural macro.\nCharacter literal.\nReturns an iterator over the children diagnostics of <code>self</code>.\nThe one-indexed column of the source file where the span …\nA span that resolves at the macro definition site.\nReturns the delimiter of this <code>Group</code>\nEmit the diagnostic.\nCreates an empty span pointing to directly after this span.\nCompares two spans to see if they’re equal.\nAdds a new child diagnostic message to <code>self</code> with the …\nCreates a new <code>Diagnostic</code> with the given <code>message</code> at the span\nParses this <code>TokenStream</code> as an expression and attempts to …\nCreates a new suffixed floating-point literal.\nCreates a new unsuffixed floating-point literal.\nCreates a new suffixed floating-point literal.\nCreates a new unsuffixed floating-point literal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a new child diagnostic message to <code>self</code> with the …\nCreates a new <code>Diagnostic</code> with the given <code>message</code> at the span\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a <code>Vec&lt;Span&gt;</code>.\nDetermines whether proc_macro has been made accessible to …\nChecks if this <code>TokenStream</code> is empty.\nReturns <code>true</code> if this source file is a real source file, …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new span encompassing <code>self</code> and <code>other</code>.\nReturns the diagnostic <code>level</code> for <code>self</code>.\nThe one-indexed line of the source file where the span …\nCreates a new span with the same name resolution behavior …\nReturns the message in <code>self</code>.\nA span that represents <code>macro_rules</code> hygiene, and sometimes …\nCreates a new diagnostic with the given <code>level</code> and <code>message</code>.\nReturns an empty <code>TokenStream</code> containing no token trees.\nCreates a new <code>Group</code> with the given delimiter and token …\nCreates a new <code>Punct</code> from the given character and spacing. …\nCreates a new <code>Ident</code> with the given <code>string</code> as well as the …\nSame as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>).\nAdds a new child diagnostic message to <code>self</code> with the …\nCreates a new <code>Diagnostic</code> with the given <code>message</code> at the span\nThe <code>Span</code> for the tokens in the previous macro expansion …\nGets the path to this source file.\nQuote a <code>TokenStream</code> into a <code>TokenStream</code>. This is the actual …\n<code>quote!(..)</code> accepts arbitrary tokens and expands into a …\nQuote a <code>Span</code> into a <code>TokenStream</code>. This is needed to …\nCreates a new span with the same line/column information …\nSets the level in <code>self</code> to <code>level</code>.\nSets the message in <code>self</code> to <code>message</code>.\nConfigures the span for <em>only this token</em>.\nConfigures the span for this <code>Group</code>’s delimiters, but not …\nConfigure the span for this punctuation character.\nConfigures the span of this <code>Ident</code>, possibly changing its …\nConfigures the span associated for this literal.\nSets the <code>Span</code>s in <code>self</code> to <code>spans</code>.\nThe span for the origin source code that <code>self</code> was …\nThe original source file into which this span points.\nReturns the source text behind a span. This preserves the …\nReturns the spacing of this punctuation character, …\nReturns the span of this tree, delegating to the <code>span</code> …\nReturns the span for the delimiters of this token stream, …\nReturns the span for this punctuation character.\nReturns the span of this <code>Ident</code>, encompassing the entire …\nReturns the span encompassing this literal.\nReturns the span pointing to the closing delimiter of this …\nAdds a new child diagnostics message to <code>self</code> with the …\nAdds a new child diagnostics message to <code>self</code> with the …\nAdds a new child diagnostics message to <code>self</code> with the …\nReturns the span pointing to the opening delimiter of this …\nAdds a new child diagnostics message to <code>self</code> with the …\nCreates a new diagnostic with the given <code>level</code> and <code>message</code> …\nReturns the <code>Span</code>s in <code>self</code>.\nCreates an empty span pointing to directly before this …\nReturns the <code>TokenStream</code> of tokens that are delimited in …\nString literal.\nReturns a <code>Span</code> that is a subset of <code>self.span()</code> containing …\nPublic implementation details for the <code>TokenStream</code> type, …\nTracked access to environment variables.\nTracked access to additional files.\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nAdds a new child diagnostic message to <code>self</code> with the …\nCreates a new <code>Diagnostic</code> with the given <code>message</code> at the span\nAn iterator over <code>TokenStream</code>’s <code>TokenTree</code>s. The iteration …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieve an environment variable and add it to build …\nTrack a file explicitly.\nA parsed attribute. See <code>parse_tagged_attribute</code> for more …\nA property, created by parsing <code>#[prefix(foo = &quot;bar&quot;)]</code>\nA tag, created by parsing <code>#[prefix(foo)]</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a tagged attribute. This is very helpful for …")