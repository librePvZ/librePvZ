searchState.loadedDescShard("optics", 0, "optics: yet another Haskell optics in Rust.\nConcrete implementations for optics.\nDeclare an <code>AffineTraversal</code> from an accessor expression.\nDeclare a <code>Lens</code> from an accessor expression.\nDeclare a <code>Lens</code> from a field name for a <code>struct</code>.\nDeclare a <code>Prism</code> from a variant name for an <code>enum</code>.\nSimilar to <code>declare_affine_traversal</code>, but does not define …\nSimilar to <code>declare_lens</code>, but does not define the lens type …\nImplement the lens hierarchy from some specific level.\nMark an optics as fallible by implementing <code>OpticsFallible</code>.\nMark an optics as infallible by implementing <code>OpticsFallible</code>…\nMark an optics to have a single known source type by …\nEasy composition for optics. See also <code>Compose</code>.\nPrelude, aimed for blanket import.\nTraits for polymorphic lens hierarchy.\nComposed optics of <code>K</code> and <code>L</code>; <code>K</code> is applied first.\nError type for <code>Compose</code>d optics.\nError happened for the first optics in this composition.\nIdentity optics.\nOptics wrapper for mapping the <code>Error</code> value.\nOptics wrapper for mapping the <code>Success</code> and <code>Error</code> value.\nOptics wrapper for mapping the <code>Success</code> and <code>Error</code> value to …\nOptics wrapper for mapping the <code>Success</code> value.\nSuccess type for <code>Compose</code>d optics.\nOperation for the first optics succeeded in this …\nIdentity optics, explicit about source and view types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for field <code>0</code> in tuples.\nLens for field <code>1</code> in tuples.\nLens for field <code>2</code> in tuples.\nLens for field <code>3</code> in tuples.\nPrism for <code>Result::Err</code>.\nPrism for <code>Result::Ok</code>.\nPrism for <code>Option::Some</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAffineFold: getter, but may fail.\nAffineFold, with mutable references.\nAffineFold, with shared references.\nAffineTraversal: usually composition of <code>Lens</code>es and <code>Prism</code>s.\nError type for this optics.\nGetter.\nGetter, with mutable references.\nGetter, with shared references.\nIsomorphisms: getter and review.\nLens: getter and setter.\nAny optics: a view type associated.\nOptics with a success type and an error type associated.\nOptics with a single possible source type.\nPrism: review and setter.\nReview: dual of getter.\nSetter.\nSource type for this optics.\nSuccess type for this optics.\nTraversal (and also Fold).\nView type for this optics.\nAssert that this optics should never fail (in practice). …\nFlatten the elements targeted by this Traversal into a <code>Vec</code>.\nFold every element targeted by this Traversal into a …\nRestricted version for <code>Setter::over</code>. Custom implementation …\nMap the <code>Error</code> type for this fallible optics.\nMap the <code>Success</code> and <code>Error</code> type for this fallible optics.\nMap the <code>Success</code> type for this fallible optics.\nApply a setter as a modifier.\nRetrieve the value targeted by an AffineFold.\nRetrieve a mutable reference the value targeted by an …\nRetrieve a shared reference the value targeted by an …\nRetrieve the value targeted by a review.\nApply a setter. No <code>Clone</code> is needed, because this optics is …\nApply a setter.\nGet a lightweight witness for success.\nMap the <code>Error</code> type to <code>Box&lt;str&gt;</code>.\nEvaluate the action from left to right on each element …\nView the value pointed to by a getter.\nGet a mutable reference to the value pointed to by a …\nGet a shared reference to the value pointed to by a getter.")