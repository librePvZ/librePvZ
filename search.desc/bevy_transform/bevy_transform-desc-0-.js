searchState.loadedDescShard("bevy_transform", 0, "Bevy Transform\nTransform related bundles\nExtension to <code>EntityCommands</code> to modify <code>bevy_hierarchy</code> …\nThe basic components of the transform crate\nHelpers related to computing global transforms System …\nTransform related plugins\nSystems responsible for transform propagation\nTransform related traits\nAn identity <code>TransformBundle</code> with no translation, rotation, …\nA <code>Bundle</code> of the <code>Transform</code> and <code>GlobalTransform</code> [<code>Component</code>]…\nReturns the argument unchanged.\nCreates a new <code>TransformBundle</code> from a <code>Transform</code>.\nThe global transform of the entity.\nCalls <code>U::from(self)</code>.\nThe transform of the entity.\nCollection of methods similar to <code>BuildChildren</code>, but …\nCommand similar to <code>PushChild</code>, but updating the child …\nCommand similar to <code>RemoveParent</code>, but updating the child …\nChild entity to add.\n<code>Entity</code> whose parent must be removed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParent entity to add the child to.\nMake this entity parentless while preserving this entity’…\nChange this entity’s parent while preserving this entity…\nDescribe the position of an entity relative to the …\nAn identity <code>GlobalTransform</code> that maps all points in space …\nAn identity <code>Transform</code> with no translation, rotation, and a …\nDescribe the position of an entity. If the entity has a …\nReturns the 3d affine transformation matrix as an <code>Affine3A</code>.\nRotates this <code>Transform</code> so that the <code>main_axis</code> vector, …\nRotates this <code>Transform</code> so that the <code>main_axis</code> vector, …\nReturn the local back vector (Z).\nEquivalent to <code>local_z()</code>\nReturns the 3d affine transformation matrix from this …\nReturns the 3d affine transformation matrix as a <code>Mat4</code>.\nReturns the 3d affine transformation matrix from this …\nReturns the transformation as a <code>Transform</code>.\nReturn the local down vector (-Y).\nEquivalent to <code>-local_y()</code>\nReturn the local forward vector (-Z).\nEquivalent to <code>-local_z()</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the translation, rotation, and scale from <code>matrix</code>. …\nCreates a new <code>Transform</code>, with <code>rotation</code>. Translation will …\nCreates a new <code>Transform</code>, with <code>scale</code>. Translation will be 0 …\nCreates a new <code>Transform</code>, with <code>translation</code>. Rotation will …\nCreates a new <code>Transform</code> at the position <code>(x, y, z)</code>. In 2d, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if, and only if, translation, rotation and …\nReturn the local left vector (-X).\nEquivalent to <code>-local_x()</code>\nGet the unit vector in the local <code>X</code> direction.\nGet the unit vector in the local <code>Y</code> direction.\nGet the unit vector in the local <code>Z</code> direction.\nRotates this <code>Transform</code> so that <code>Transform::forward</code> points …\nRotates this <code>Transform</code> so that <code>Transform::forward</code> points …\nReturns this <code>Transform</code> with a new rotation so that …\nReturns this <code>Transform</code> with a new rotation so that …\nMultiplies <code>self</code> with <code>transform</code> component by component, …\nMultiplies <code>self</code> with <code>transform</code> component by component, …\nGet an upper bound of the radius from the given <code>extents</code>.\nReturns the <code>Transform</code> <code>self</code> would have if it was a child of …\nReturn the local right vector (X).\nEquivalent to <code>local_x()</code>\nRotates this <code>Transform</code> by the given rotation.\nRotates this <code>Transform</code> around a <code>point</code> in space.\nRotates this <code>Transform</code> around the given <code>axis</code> by <code>angle</code> (in …\nRotates this <code>Transform</code> by the given <code>rotation</code>.\nRotates this <code>Transform</code> around its local <code>axis</code> by <code>angle</code> (in …\nRotates this <code>Transform</code> around its local <code>X</code> axis by <code>angle</code> …\nRotates this <code>Transform</code> around its local <code>Y</code> axis by <code>angle</code> …\nRotates this <code>Transform</code> around its local <code>Z</code> axis by <code>angle</code> …\nRotates this <code>Transform</code> around the <code>X</code> axis by <code>angle</code> (in …\nRotates this <code>Transform</code> around the <code>Y</code> axis by <code>angle</code> (in …\nRotates this <code>Transform</code> around the <code>Z</code> axis by <code>angle</code> (in …\nRotation of the entity.\nScale of the entity.\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.\nTransforms the given <code>point</code>, applying shear, scale, …\nTransforms the given <code>point</code>, applying scale, rotation and …\nTranslates this <code>Transform</code> around a <code>point</code> in space.\nGet the translation as a <code>Vec3</code>.\nPosition of the entity. In 2d, the last value of the <code>Vec3</code> …\nGet the translation as a <code>Vec3A</code>.\nReturn the local up vector (Y).\nEquivalent to <code>local_y()</code>\nReturns this <code>Transform</code> with a new rotation.\nReturns this <code>Transform</code> with a new scale.\nReturns this <code>Transform</code> with a new translation.\nError returned by <code>TransformHelper::compute_global_transform</code>…\nAn ancestor is missing. This probably means that your …\nThe entity or one of its ancestors is missing the <code>Transform</code>…\nThe entity does not exist.\nSystem parameter for computing up-to-date <code>GlobalTransform</code>s.\nComputes the <code>GlobalTransform</code> of the given entity from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe base plugin for handling <code>Transform</code> components\nPropagates changes in transform to children’s …\nSet enum for the systems relating to transform propagation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate <code>GlobalTransform</code> component of entities based on …\nUpdate <code>GlobalTransform</code> component of entities that aren’t …\nA trait for point transformation methods.\nTransform a point.")