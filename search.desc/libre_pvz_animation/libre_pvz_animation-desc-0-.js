searchState.loadedDescShard("libre_pvz_animation", 0, "librePvZ-animation: animation playing for librePvZ for <code>bevy</code>…\nExtend <code>App</code> with an <code>register_for_animation</code> API.\nPlugin for animation playing.\nLabels for animation systems.\nInitialize/update curve bindings.\nSample the curves and apply to the entities.\nTicking the time in animation players.\nFull animation clips.\nVariable curves in animation clips.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnimation players.\nRegister a <code>Component</code> for animation.\nDedicated 2D transformation.\nAnimation clip, core to the animation system.\nBuilder for <code>AnimationClip</code>s.\nTypes suitable to be used as labels for curves in a …\nEntity path is all the <code>Name</code>s along the path.\nAn animation track, i.e. all curves for some entity.\nBuilder for animation <code>Track</code>s, building <code>Curve</code>s from scratch.\nAdd a new curve into the clip.\nAdd a new curve into the clip.\nAdd a whole new track into the clip.\nFinish building the clip.\nGet a builder to build an animation clip.\nGet the <code>Curve</code>s.\nFinish building this track.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>Curve</code> at index <code>k</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator into the fragments.\nGet an iterator of <code>Curve</code>s into this animation clip.\nGet a builder to build an animation clip.\nPrepare a curve in this track, e.g., to use optimised …\nPush a keyframe into this track. The frame will end up in …\nBevy tracks changes in mutable references like <code>Mut</code>. We use …\nType-erased <code>Curve</code>. Prefer <code>Curve</code> whenever possible.\nTarget component.\nAnimation curve.\nBind a contiguous range of curves (on the same component) …\nInformation about a curve binding.\nDescriptor for the curves. Different curves for the same …\nField accessor.\nA segment in a curve.\nAnimation curve with known single variable type.\nAssert the target component type for some <code>AnyComponent</code>.\nValue type for this curve.\nTypes that may be used in curves.\nApply the sampled value to the target component as the …\nDelegate to <code>Curve::apply_sampled</code>.\nAttach a curve binding to an entity.\nBlending two different animation segments.\nBuilder API for <code>Curve</code>s.\nRead the current value of the component.\nBorrow the component as mutable and mark it dirty.\nGet the target component type id for verification.\nConcrete curves.\nGet a descriptor for this <code>Curve</code>.\nIndex of the last frame, inclusive.\nGet a field accessor for the targeted field.\nDuration of this curve, in number of frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDelegate to <code>Curve::frame_count</code>.\nInformation about this binding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of frames in this segment.\nNumber of frames in this segment, if looping.\nCreate a new curve binding with specified information.\nCreate a new curve descriptor for specified component type.\nRead the current value from the target field.\nSample the curve at specific frame index.\nIndex of the first frame, inclusive.\nUpdate the field in the component with a new value.\nAnimatable types can be interpolated with <code>f32</code>s.\nTypically <code>a * (1 - time) + b * time</code>.\nInformation about blending.\nThe blend function for use. All functions below …\nA simple linear transition function:\nA smooth transition function using the exponential …\nA smooth transition function using the hyperbolic tangent …\nBlend two values using the specified information.\nDuration for transition.\nFactor for blending, with <code>ratio</code> being the progress of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlending function to use.\nAn alternative dynamic interface for <code>CurveBuilder</code>.\nConvenient builder for <code>Curve</code>s.\nBuilder for track contents (keyframes). Only intended for …\nTarget type to build, a <code>CurveContent</code>.\nFinish building this track content.\nFinish building this curve.\nFinish building this curve. Prefer <code>CurveBuilder::finish</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert to a dynamic <code>AnyCurveBuilder</code>.\nCreate a curve builder.\nPush one keyframe into this curve.\nPush one keyframe to this builder.\nPush one keyframe into this curve.\nProvides linear random access to keyframe contents in a …\nProvided borrowed access to the keyframe contents.\nThe lifetime-irrelevant part of the <code>CurveContent</code> interface.\nKeyframe content type.\nKeyframe animation curve.\nBorrow of keyframe contents.\nGet keyframe at specific index.\nTrack length.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a keyframe curve.\nAnimation player.\nPlaying status of an animation.\nGet elapsed time in seconds.\nAnimation finished playing?\nFrame count in one cycle (total frame count if not …\nGet the current frame rate of this animation player.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnimation just finished playing after last query?\nReturn a shared reference to the status of the “main” …\nReturns mode (whether it is repeating) for the timer.\nCreate a new animation status (initial state).\nCreate an animation player that plays the specific clip.\nPause the animation.\nIs the animation paused?\nStart playing the specified animation segment without …\nStart playing the specified animation segment with …\nProgress of this animation (in number of frames).\nReset the animation playing status.\nSet the frame rate of this animation player.\nSets whether the animation is repeating or not.\nSet the progress of this animation (in number of frames).\nSet the segment for playing.\nReturn a shared reference to the animation status if there …\nReturn a mutable reference to the animation status if …\nTick the time by several seconds.\nResume the animation.\nIdentity 2D transform.\nSimilar to <code>TransformBundle</code>, but with a full-fledged …\nSimilar to <code>SpriteBundle</code>, but with a full-fledged …\n2D transformation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Transform</code>, with <code>scale</code>. Translation will be 0 …\nCreates a new <code>Transform</code>, with <code>translation</code>. Rotation will …\nThe global transform of the entity.\nGlobal transform (relative to the stage), for rendering.\nInherited visibility of an entity.\nInherited visibility of an entity.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe transform of the entity.\nRotation of both axes.\nScaling along x and y-axes.\nSprite information.\nTexture image for this entity.\nConvert to an affine transformation for use in <code>bevy</code>.\nLocal transform (relative to parent).\nUpdate <code>GlobalTransform</code> component of entities based on …\nTranslation.\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible.\nUser indication of whether an entity is visible.\nRelative z-order.")